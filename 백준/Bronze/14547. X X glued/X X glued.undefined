#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma GCC comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

void solve(ll test) {
    ll i, j, k;
    while (true) {
        string buffer;
        cin >> buffer; if (buffer == "#") break;
        string n; cin >> n;
        cin >> buffer;
        // bool case1 = (n[0]==n[1] && n[2]!=n[3])
        //                 || (n[0]!=n[1] && n[1]==n[2])
        //                 || (n[0]!=n[1] && n[2]==n[3]);
        // bool case2 = (n[0]==n[1] && n[2]==n[3] && n[1]!=n[2]);
        // bool case3 = (n[0]==n[1] && n[1]==n[2] && n[2]==n[3]);
        if (n[0]==n[1] && n[2]!=n[3]) {
            cout << n[0] << " " << n[1] << " glued\n";
        }
        else if (n[0]!=n[1] && n[1]==n[2]) {
            cout << n[1] << " " << n[2] << " glued\n";
        }
        else if (n[0]!=n[1] && n[2]==n[3]) {
            cout << n[2] << " " << n[3] << " glued\n";
        }
        else if (n[0]==n[1] && n[2]==n[3] && n[1]!=n[2]) {
            cout << n[0] << " " << n[1] << " glued and ";
            cout << n[2] << " " << n[3] << " glued\n";
        }
        else if (n[0]==n[1] && n[1]==n[2] && n[2]==n[3]) {
            cout << n[2] << " " << n[3] << " glued\n";
        }
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test=1; test<=t; test++) {
        solve(test);
    }
    return 0;
}
