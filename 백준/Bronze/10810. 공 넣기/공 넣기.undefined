#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct LazySegTree {
    ll n;
    vector<ll> tree, lazy;
    LazySegTree(ll n): n(n), tree(n<<2, 0), lazy(n<<2, 0) {}
    void push(ll i, ll s, ll e) {
        if (!lazy[i]) return;
        ll m = (s+e)>>1;
        tree[i<<1] = lazy[i];
        lazy[i<<1] = lazy[i];
        tree[i<<1|1] = lazy[i];
        lazy[i<<1|1] = lazy[i];
        lazy[i] = 0;
    }
    void segUpdate(ll i, ll s, ll e, ll l, ll r, ll val) {
        if (s>r || e<l) return;
        if (l<=s && e<=r) {
            tree[i] = val;
            lazy[i] = val;
            return;
        }
        push(i, s, e);
        ll m = (s+e)>>1;
        segUpdate(i<<1, s, m, l, r, val);
        segUpdate(i<<1|1, m+1, e, l, r, val);
    }
    void update(ll l, ll r, ll val) {
        segUpdate(1, 0, n-1, l, r, val);
    }
    ll segQuery(ll i, ll s, ll e, ll pos) {
        if (s==e) return tree[i];
        push(i, s, e);
        ll m = (s+e)>>1;
        return pos<=m ? segQuery(i<<1, s, m, pos) : segQuery(i<<1|1, m+1, e, pos);
    }
    ll query(ll pos) {
        return segQuery(1, 0, n-1, pos);
    }
};

void solve(ll testcase){
    ll i, j, k;
    ll N, M; cin >> N >> M;
    LazySegTree tree(N+1);
    while (M--) {
        cin >> i >> j >> k;
        tree.update(i, j, k);
    }
    for (i=1; i<=N; i++) {
        cout << tree.query(i) << " ";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}