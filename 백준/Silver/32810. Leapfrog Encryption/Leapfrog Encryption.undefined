#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess () {
    ll i, j, k;
}

void solve() {
    ll i, j, k;
    char type; cin>>type;
    string key, tmp, text; cin>>key;
    cin.ignore();
    getline(cin, tmp);
    for (auto ch: tmp) {
        if ('a'<=ch && ch<='z') text += ch;
        if ('A'<=ch && ch<='Z') text += (char)(ch-'A'+'a');
    }
    ll n = text.size();
    vl indices, used(n);
    for (i=0;i<key.size();i++) {
        ll interval = key[i]-'a'+2;
        if (i&1) {
            ll cur=n;
            while (cur>=0) {
                ll t = interval;
                while (t) {
                    cur--;
                    if (cur==-1) break;
                    if (used[cur]==0) t--;
                }
                if (cur>=0) {
                    indices.push_back(cur);
                    used[cur]=1;
                }
            }
        }
        else {
            ll cur=-1;
            while (cur<n) {
                ll t = interval;
                while (t) {
                    cur++;
                    if (cur==n) break;
                    if (used[cur]==0) t--;
                }
                if (cur==n) break;
                indices.push_back(cur);
                used[cur]=1;
            }
        }
    }
    if (indices.size()!=n) {
        if (key.size()&1) {
            for (i=n-1;i>=0;i--)
                if (used[i]==0) indices.push_back(i);
        }
        else {
            for (i=0;i<n;i++)
                if (used[i]==0) indices.push_back(i);
        }
    }
    // cout<<indices.size()<<endl;
    // for (auto idx: indices) cout<<idx<<' '; cout<<endl;
    if (type=='E') {
        string ans(n, '*');
        for (i=0;i<n;i++) {
            ans[indices[i]] = text[i];
        }
        cout<<ans<<'\n';
    }
    else {
        string ans;
        for (i=0;i<n;i++) ans.push_back(text[indices[i]]);
        cout<<ans<<'\n';
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test=1; test<=t; test++) {
        solve();
    }
    return 0;
}