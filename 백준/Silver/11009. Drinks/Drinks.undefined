#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize ("O3, unroll-loops")
#pragma GCC target ("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vector<ll>>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

__int128 gcd(__int128 a, __int128 b) {
    if (b==0) return a;
    return gcd(b, a%b);
}

struct Fraction {
    __int128 ja, mo;
    Fraction() : ja(-1), mo(1) {}
    Fraction(__int128 j, __int128 m) : ja(j), mo(m) {}
    void simplify() {
        if (ja==0) {
            mo=1;
            return;
        }
        __int128 g = gcd(ja, mo);
        ja/=g, mo/=g;
    }
    Fraction operator+(const Fraction &rhs) const {
        Fraction ret(ja*rhs.mo+mo*rhs.ja, mo*rhs.mo);
        ret.simplify();
        return ret;
    }
    Fraction operator*(const Fraction &rhs) const {
        Fraction ret(ja*rhs.ja, mo*rhs.mo);
        ret.simplify();
        return ret;
    }
};

vector<vector<Fraction>> cache(61, vector<Fraction>(61));
Fraction p(ll r, ll w) {
    assert(r>=0 && w>=0);
    if (w<=1) {
        Fraction ret(r, w+r);
        ret.simplify();
        return ret;
    }
    if (cache[r][w].ja>=0) return cache[r][w];
    cache[r][w] = p(r, w-2);
    cache[r][w] = cache[r][w] * Fraction(w, r+w);
    cache[r][w] = cache[r][w] * Fraction(w-1, r+w-1);
    cache[r][w] = cache[r][w] + Fraction(r, r+w);
    return cache[r][w];
}

void preprocess() {
    ll i, j, k;
    // for (i=1;i<=59;i++) {
    //     for (j=1;j<=59;j++) {
    //         // if (i+j>61) continue;
    //         Fraction res=p(i, j);
    //         if (res.ja<0 || res.mo<0 || gcd(res.ja, res.mo) != 1) {
    //             cout<<i<<' '<<j<<endl;
    //             cout<<(ll)res.ja<<' '<<(ll)res.mo<<endl;
    //         }
    //     }
    // }
}

void solve(ll testcase) {
    ll i, j, k;
    ll r, w; cin>>r>>w;
    Fraction result = p(r, w);
    result.simplify();
    cout<<(ll)result.ja<<'/'<<(ll)result.mo<<'\n';
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    cin >> t;
    for (ll testcase = 1; testcase<=t; testcase++) {
        solve(testcase);
    }
    return 0;
}