#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef pair<ll, ll> pll;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

void solve(ll testcase){
    ll i, j, k;
    ll w, h, n, d;
    cin >> w >> h >> n >> d;
    vector<ll> a(n);    // lane y좌표 저장
    vector<ll> p(n);    // 밀도 저장
    for(auto& e : a) cin >> e;
    for(auto& e : p) cin >> e;

    auto getLane = [&a, &h](const ll& x) {
        auto lb = lower_bound(a.begin(), a.end(), x);
        if (*lb == h) return lb - a.begin();
        if (*lb == x) return lb - a.begin() + 1;
        return lb - a.begin();
    };
    // for (i = 0; i <= h; i++) {
    //     cout << "i : " << i << ", getLane(i) : " << getLane(i) << '\n';
    // }

    // (0,0)에서 각 레인의 경계까지 거리
    vector<ll> t1(h + 1);
    t1[0] = 0;
    for (i = 0; i < h; i++) {
        t1[i + 1] = t1[i] + p[getLane(i)];
    }
    // (w, d에서 각 레인의 경계까지 거리)
    vector<ll> t2(h + 1);
    t2[d] = 0;
    for (i = d; i < h; i++) {
        t2[i + 1] = t2[i] + p[getLane(i)];
    }
    for (i = d - 1; i >= 0; i--) {
        t2[i] = t2[i + 1] + p[getLane(i)];
    }

    // i에서 가로지르는 모든 경로들 중 최솟값
    ll ans = 1e10, time;
    for (i = 0; i <= h; i++) {
        time = t1[i] + t2[i] + w * p[getLane(i)];
        ans = min(ans, time);
    }
    cout << ans;

    // for (i = 0; i <= h; i++) {
    //     cout << "i : " << i << ", time : " << t2[i] << "\n";
    // }
 }

int main() {
    setup();
    preprocess();
    ll t = 1;
//    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}