#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

void solve() {
    ll i, j, k;
    while (true) {
        ll N; cin >> N;
        if (!N) break;

        vvl table;
        ll a, b;
        for (i=0; i<N; i++) {
            cin >> a >> b;
            if (a == b) continue;
            table.emplace_back(vl{a, b});
        }
        vl next(table.size()), prev(table.size()); // 연결리스트
        N = table.size();
        for (i=0; i<N; i++) {
            next[i] = (i+1)%N;
            prev[i] = (i-1+N)%N;
        }

        ll ans = 0, cur = 0, remain = N;
        while (remain > 0) {
            sort(table[cur].begin(), table[cur].end());

            // 2개 남았는데 지울 수 있는 경우
            if (table[cur].size()==2 && table[cur][0]==table[cur][1]) {
                prev[next[cur]] = prev[cur];
                next[prev[cur]] = next[cur];
                remain--;
                cur = next[cur];
                continue;
            }

            // 3개 남았는데 지울 수 있는 경우
            if (table[cur].size() == 3) {
                if (table[cur][0] == table[cur][1]) {
                    table[cur] = { table[cur][2] };
                    remain--;
                }
                else if (table[cur][1] == table[cur][2]) {
                    table[cur] = { table[cur][0] };
                    remain--;
                }
            }

            // 줄 수 있으면 다음 사람한테 주기
            if (table[cur].size() > 0) {
                table[next[cur]].emplace_back(table[cur].front());
                table[cur].erase(table[cur].begin());
                ans++;
            }

            // 비어 있으면 지우기
            if (table[cur].size() == 0) {
                prev[next[cur]] = prev[cur];
                next[prev[cur]] = next[cur];
            }

            cur = next[cur];
        }
        cout << ans << "\n";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test=1; test<=t; test++) {
        solve();
    }
    return 0;
}

// #include <bits/stdc++.h>
// #pragma warning(disable:4996)
// #pragma comment(linker,"/STACK:336777216")
// #pragma GCC optimize("O3,unroll-loops")
// #pragma GCC target("avx,avx2,fma")
// using namespace std;
// using ll = long long;
// using pll = pair<ll,ll>;
// using ld = long double;
// using pld = pair<ld,ld>;
// using tlll = tuple<ll,ll,ll>;
// using vl = vector<ll>;
// using vvl = vector<vl>;
//
// #ifdef ONLINE_JUDGE
// constexpr bool ndebug = true;
// #else
// constexpr bool ndebug = false;
// #endif
//
// void setup() {
//     if (!ndebug) {
//         freopen("input.txt", "r", stdin);
//         freopen("output.txt", "w", stdout);
//     }
//     else {
//         ios_base::sync_with_stdio(0);
//         cin.tie(0);
//         cout.tie(0);
//     }
// }
//
// void preprocess() {
//     ll i, j, k;
// }
//
// void solve() {
//     ll i, j;
//     while (true) {
//         ll n, m; cin>>n>>m;
//         if (n==0 && m==0) break;
//         if (n==0) {
//             cout<<-m*m<<'\n';
//             continue;
//         }
//         ll ans=LLONG_MIN;
//         for (i=2;i<=n+1;i++) {
//             ll p=m/i, q=m%i;
//             ll cur = (i-2) + (n-i+2)*(n-i+2) - ((p*p)*(i-q) + (p+1)*(p+1)*q);
//             ans = max(cur, ans);
//         }
//         cout<<ans<<'\n';
//     }
// }
//
// int main() {
//     setup();
//     preprocess();
//     ll t = 1;
//     // cin >> t;
//     for (ll test=1; test<=t; test++) {
//         solve();
//     }
//     return 0;
// }