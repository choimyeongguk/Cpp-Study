#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

bool isPalindrome(const string& str) {
    ll l = 0, r = str.size()-1;
    while (l<r) {
        if (str[l] != str[r]) return false;
        l++, r--;
    }
    return true;
}

void solve() {
    ll i, j, k;
    string str; cin >> str;
    ll L = str.size();
    if (L==1) {
        cout << str;
        return;
    }

    // 길이 L보다 작은 회문수 개수 일단 더해주기
    ll ans = 0;
    for (i=1; i<L; i++)
        ans += 9*pow(10,(i+1)/2-1);

    ll cur;
    for (i=0; i<L/2; i++) {
        cur = str[i] - '0';
        if (i==0) ans += (cur - 1) * pow(10, (L-2+1)/2);
        else ans += cur * pow(10, (L-2*(i+1)+1)/2);
    }

    if (L & 1) {    // 홀수인 경우
        cur = str[L/2];
        ans += cur - '0';
        string tmp = str.substr(0, L/2+1);
        string tmp2 = str.substr(0, L/2);
        reverse(tmp2.begin(), tmp2.end());
        tmp += tmp2;
        if (stoll(tmp) <= stoll(str)) ans++;
    }
    else {          // 짝수인 경우
        cur = str[L/2-1];
        string tmp = str.substr(0, L/2);
        string tmp2 = tmp;
        reverse(tmp2.begin(), tmp2.end());
        tmp += tmp2;
        if (stoll(tmp) <= stoll(str)) ans++;
    }

    cout << ans;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test=1; test<=t; test++) {
        solve();
    }
    return 0;
}