#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }else{
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preproces() {
    ll i, j, k;
}

ll powm(ll n,ll k) {
    ll ret=1;
    while (k) {
        if (k&1) ret*=n;
        n*=n;
        k>>=1;
    }
    return ret;
}

struct sieve {
    vl sp,e,phi,mu,tau,sigma,primes;
    sieve(ll sz) {
        sp.resize(sz+1);
        e.resize(sz+1);
        phi.resize(sz+1);
        mu.resize(sz+1);
        tau.resize(sz+1);
        sigma.resize(sz+1);

        phi[1]=mu[1]=tau[1]=sigma[1]=1;
        for (ll i=2;i<=sz;i++) {
            if (!sp[i]) {
                primes.push_back(i),e[i]=1,phi[i]=i-1;
                mu[i]=-1,tau[i]=2;
                sp[i]=i,sigma[i]=i+1;
            }
            for ( auto j :primes) {
                if (i*j>sz) break;
                sp[i*j]=j;
                if (i%j==0) {
                    e[i*j]=e[i]+1,phi[i*j]=phi[i]*j;
                    mu[i*j]=0,tau[i*j]=tau[i]/e[i*j]*(e[i*j]+1);
                    sigma[i*j]=sigma[i]*(j-1)/(powm(j,e[i*j])-1)*(powm(j,e[i*j]+1)-1)/(j-1);
                    break;
                }
                e[i*j]=1,phi[i*j]=phi[i]*phi[j];
                mu[i*j]=mu[i]*mu[j];
                tau[i*j]=tau[i]*tau[j];
                sigma[i*j]=sigma[i]*sigma[j];
            }
        }
    }
};

void solve() {
    ll n;
    cin>>n;
    sieve s(1000001);
    for (ll i=0;i<n;i++) {
        ll k;
        cin>>k;
        // for (ll i=0;i<s.sigma.size();i++) {
        //     cout<<s.sigma[i]<<" ";
        // }

        ll sum=s.sigma[k]-k;
        //cout<<sum<<'\n';
        if (sum==k) {
            cout<<"perfect\n";
        }
        else if (sum>k) {
            cout<<"abundant\n";
        }
        else {
            cout<<"deficient\n";
        }
    }
}

int main() {
    setup();
    preproces();
    ll t = 1;
    // cin >> t;
    for (ll test=1; test<=t; test++) {
        solve();
    }
    return 0;
}