#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

void solve(ll test) {
    ll i, j, k;
    ll N; cin >> N;
    vector<string> ip;
    for (i=0; i<N; i++) {
        string tmp; ll num; char buffer;
        cin >> num >> buffer;
        bitset<8> bs(num);
        for (j=7; j>=0; j--)
            tmp += bs[j] ? "1" : "0";

        cin >> num >> buffer;
        bs = num;
        for (j=7; j>=0; j--)
            tmp += bs[j] ? "1" : "0";

        cin >> num >> buffer;
        bs = num;
        for (j=7; j>=0; j--)
            tmp += bs[j] ? "1" : "0";

        cin >> num;
        bs = num;
        for (j=7; j>=0; j--)
            tmp += bs[j] ? "1" : "0";

        ip.emplace_back(tmp);
    }

    // for (auto& e : ip) cout << e << "\n";

    for (i=0; i<32; i++) {
        bool same = true;
        for (j=1; j<N; j++) {
            if (ip[j][i] != ip[j-1][i]) {
                same = false;
                break;
            }
        }
        // cout << i << "\n";
        if (same == false) {
            cout << i;
            // if (i==0) cout << 32;
            // else cout << i;
            return;
        }
    }
    cout << 32;

    // for (ll l=1; l<32; l++) {
    //     unordered_set<string> S;
    //     for (i=0; i<N; i++)
    //         S.insert(ip[i].substr(32-l, l));
    //     if (S.size() == N) {
    //         cout << 32-l;
    //         return;
    //     }
    // }
    // cout << 32;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test = 1; test <= t; test++) {
        solve(test);
    }
    return 0;
}