#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct DSU {
    vl pa, dist, sz;
    // pa[x] = y := x의 부모는 y
    // pa[x] = z := x는 부모보다 z만큼 무겁다

    DSU(ll n)
        : pa(n+1), dist(n+1, 0), sz(n+1, 1) {
        iota(pa.begin(),pa.end(),0);
    }
    ll _find(ll x) {
        if (pa[x] == x) return x;
        ll newPa = _find(pa[x]);
        dist[x] += dist[pa[x]];
        return pa[x] = newPa;
    }
    ll _getDist(ll x) {
        _find(x);
        return dist[x];
    }
    void _union(ll light,ll heavy, ll cost) {
        ll newLight = _find(light);
        ll newHeavy = _find(heavy);
        ll distL = dist[light], distH = dist[heavy];
        if (newLight == newHeavy) return;
        ll sign = 1;
        if (sz[newLight] < sz[newHeavy]) {
            swap(newLight, newHeavy);
            sign = -1;
        }
        pa[newHeavy] = newLight;
        dist[newHeavy] = (cost - distH + distL) * sign;
        sz[newLight] += sz[newHeavy];
    }
};

void solve(ll testcase){
    ll i, j, k;
    while (true) {
        ll N, M; cin >> N >> M;
        if (!N && !M) break;
        DSU dsu(N);
        char op; ll a, b, w;
        while (M--) {
            cin >> op >> a >> b;
            switch (op) {
                case '!':
                    cin >> w;
                    dsu._union(a, b, w);
                    break;
                case '?':
                    if (dsu._find(a) != dsu._find(b))
                        cout << "UNKNOWN\n";
                    else cout << dsu._getDist(b) - dsu._getDist(a) << "\n";
                    break;
            }
        }
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}