#include <bits/stdc++.h>
using namespace  std;

using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b) {return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){ if (a&&b)return a*(b/gcd(a,b)); return a+b;}
pll extended_gcd(ll a, ll b) {if (b==0)return{1,0}; auto t = extended_gcd(b,a%b);return {t.second,t.first-t.second*(a/b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first%m+m)%m;}

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

void solve(ll testcase) {
    ll i, j, k;
    while (true) {
        ll N; cin >> N;
        if (!N) break;

        set<pair<ll,pll>> wallet;
        ll cost;
        wallet.emplace(0, pll{0, 0});

        for (i=0; i<N; i++) {
            cin >> cost;
            ll remain = 1000 - (cost % 1000);
            if (remain == 1000) remain = 0;
            set<pair<ll,pll>> tmp;    // change : [use, coin]
            for (auto& [change, pair] : wallet) {
                auto& [use, coin] = pair;
                ll new_change = change + remain;
                ll new_cost = use + cost;
                ll new_coin = coin;

                if (new_change >= 500) {
                    new_change -= 500;
                    new_coin++;
                }
                tmp.emplace(new_change, pll{new_cost, new_coin});
            }
            for (auto& [change,pair] : tmp) {
                // 중복제거 구현해야함
                auto& [use,coin] = pair;
                bool flag = true;
                while (true) {
                    auto it = wallet.lower_bound({change, pll{0,0}});
                    // 넣고자 하는 값과 거스름돈이 같은 노드 찾기
                    if (it==wallet.end() || it->first!=change) {
                        // 넣을 수 있음 : 거스름돈이 같은 노드가 없음
                        flag = true;
                        break;
                    }
                    // 거스름돈이 같을 때,
                    if (it->second.second > coin) {
                        flag = false;
                        break;
                    } else if (it->second.second < coin) {
                        wallet.erase(it);
                        continue;
                    }
                    // 동전 사용도 같을 때
                    if (it->second.first < use) {
                        flag = false;
                        break;
                    } else if (it->second.first >= coin) {
                        wallet.erase(it);
                    }
                    // wallet.erase(it);
                }

                if (flag)
                    wallet.emplace(change,pair);
            }
        }
        ll maxCoin = 0, minUse = 1e10;
        for (auto& [change,pair] : wallet) {
            auto& [use,coin] = pair;
            if (coin > maxCoin) {
                maxCoin = coin;
                minUse = use;
            }
            else if (coin == maxCoin && use<minUse) {
                minUse = use;
            }
            // cout << "change: " << change << " ,use: " << use << " ,coin: " << coin << "\n";
        }
        cout << maxCoin << " " << minUse << "\n";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++) {
        solve(testcase);
    }
    return 0;
}