#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct Query {
    ll l, r, idx, bi;
};

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    vl arr(N); for (auto& e : arr) cin >> e;
    ll M; cin >> M;
    vector<Query> query(M);
    ll block = max(1LL, (ll)sqrt(N));
    i = 0;
    for (auto& [l,r,idx,bi] : query) {
        cin >> l >> r;
        l--, r--;
        idx = i++;
        bi = l/block;
    }
    sort(query.begin(), query.end(), [&](const Query& a, const Query& b) {
        if (a.bi != b.bi) return a.bi < b.bi;
        if (a.bi & 1) return a.r > b.r;
        return a.r < b.r;
    });

    ll distinct = 0;
    vl freq(1'000'001, 0);
    auto add = [&](const ll& x) { if (++freq[arr[x]] == 1) distinct++; };
    auto remove = [&](const ll& x) { if (--freq[arr[x]] == 0) distinct--; };
    ll l = 0, r = -1;
    vl ans(M);
    for (auto& [lq,rq,idx,bi] : query) {
        while (l<lq) remove(l++);
        while (l>lq) add(--l);
        while (r<rq) add(++r);
        while (r>rq) remove(r--);
        ans[idx] = distinct;
    }
    for (auto& e : ans)
        cout << e << "\n";
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}