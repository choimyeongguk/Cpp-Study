#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

struct Face {
    ll corner[4];
    string edge[4];
    void rotate() {
        ll t = corner[0];
        corner[0] = corner[3];
        corner[3] = corner[2];
        corner[2] = corner[1];
        corner[1] = t;
        string tmp = edge[0];
        edge[0] = edge[3];
        edge[3] = edge[2];
        edge[2] = edge[1];
        edge[1] = tmp;
    }
    void flip() {
        swap(corner[0], corner[1]);
        swap(corner[2], corner[3]);
        swap(edge[1], edge[3]);
        reverse(edge[0].begin(), edge[0].end());
        reverse(edge[1].begin(), edge[1].end());
        reverse(edge[2].begin(), edge[2].end());
        reverse(edge[3].begin(), edge[3].end());
    }
    bool good(ll x, const Face& o, ll y) const {
        for (ll i=0; i<edge[x].size(); i++) {
            if (edge[x][i] == o.edge[y][edge[x].size() - 1 - i]) {
                return false;
            }
        }
        return true;
    }
};

void solve(ll test) {
    ll i, j, k;
    while (true) {
        ll N; cin >> N;
        if (!N) break;
        vector<vector<char>> input(N, vector<char>(N));
        vector<Face> face(6);
        for (i=0; i<6; i++) {
            for (auto& e : input)
                for (auto& v : e)
                    cin >> v;
            ll c1 = input[0][0]=='X';
            ll c2 = input[0][N-1]=='X';
            ll c3 = input[N-1][N-1]=='X';
            ll c4 = input[N-1][0]=='X';
            string y1, y2, y3, y4;
            for (j=1; j<N-1; j++) {
                y1 += input[0][j];
                y2 += input[j][N-1];
                y3 += input[N-1][N-1-j];
                y4 += input[N-1-j][0];
            }
            face[i] = {c1, c2, c3, c4, y1, y2, y3, y4};
        }

        vector<Face> ans(6);
        vector<bool> used(6, false);

        function<bool(char)> back_track = [&](char cur) {
            for (ll i=1; i<6; i++) {
                if (used[i]) continue;
                used[i] = true;     // face[i]를 일단 사용해본다
                // 현재 상태에서 돌려 봄
                Face& candi = face[i];
                for (ll k=0; k<2; k++) {
                    for (ll j=0; j<4; j++) {
                        ll c1, c2, c3, c4;
                        switch (cur) {
                            case 'F':
                                if (ans[0].good(2, candi, 0)) {
                                    ans[1] = candi;
                                    if (back_track('R')) return true;
                                }
                                break;
                            case 'R':
                                c1 = ans[0].corner[2] + ans[1].corner[1] + candi.corner[0];
                                if (ans[0].good(1, candi, 0) && ans[1].good(1, candi, 3)
                                    && c1==1) {
                                    ans[2] = candi;
                                    if (back_track('B')) return true;
                                }
                                break;
                            case 'B':
                                c1 = ans[0].corner[1] + ans[2].corner[1] + candi.corner[0];
                                if (ans[0].good(0, candi, 0) && ans[2].good(1, candi, 3)
                                    && c1==1) {
                                    ans[3] = candi;
                                    if (back_track('L')) return true;
                                }
                                break;
                            case 'L':
                                c1 = ans[0].corner[0] + ans[3].corner[1] + candi.corner[0];
                                c2 = ans[0].corner[3] + ans[1].corner[0] + candi.corner[1];
                                if (ans[0].good(3, candi, 0) && ans[1].good(3, candi, 1) && ans[3].good(1, candi, 3)
                                    && c1==1 && c2==1) {
                                    ans[4] = candi;
                                    if (back_track('D')) return true;
                                }
                                break;
                            case 'D':
                                c1 = ans[1].corner[3] + ans[4].corner[2] + candi.corner[0];
                                c2 = ans[1].corner[2] + ans[2].corner[3] + candi.corner[1];
                                c3 = ans[2].corner[2] + ans[3].corner[3] + candi.corner[2];
                                c4 = ans[3].corner[2] + ans[4].corner[3] + candi.corner[3];
                                if (ans[1].good(2, candi, 0) && ans[2].good(2, candi, 1) && ans[3].good(2, candi, 2) && ans[4].good(2, candi, 3)
                                    && c1==1 && c2==1 && c3==1 && c4==1) {
                                    return true;
                                }
                                break;
                        }
                        candi.rotate();
                    }
                    candi.flip();
                }
                used[i] = false;
            }
            return false;
        };

        ans[0] = face[0];
        used[0] = true;
        if (back_track('F')) {
            cout << "Yes\n";
        } else cout << "No\n";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test = 1; test<=t; test++) {
        solve(test);
    }
    return 0;
}