#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct Edge {
    pll p1, p2;
};

void solve(ll testcase){
    ll i, j, k;

    // 입력
    ll N; cin >> N;
    vector<pll> pt(N);
    map<pll,ll> mp;
    ll id = 0;
    for (auto& [x,y] : pt) {
        cin >> x >> y;
        if (!mp.contains({x, y}))
            mp[{x, y}] = id++;
    }

    // 점 검사 및 Edge 찾기
    sort(pt.begin(), pt.end(), [](const pll& a, const pll& b) {
        return a.first==b.first ? a.second<b.second : a.first<b.first;
    }); // x 기준 정렬
    vector<Edge> vertical;
    for (i=N-1; i>0; i--) {
        if (pt[i].first == pt[i-1].first) {
            vertical.emplace_back(pt[i-1], pt[i]);
            i--;
        }
        else {
            cout << "NO\n";
            return;
        }
    }
    sort(pt.begin(), pt.end(), [](const pll& a, const pll& b) {
        return a.second==b.second ? a.first<b.first : a.second<b.second;
    }); // y 기준 정렬
    vector<Edge> horizontal;
    for (i=N-1; i>0; i--) {
        if (pt[i].second == pt[i-1].second) {
            horizontal.emplace_back(pt[i-1], pt[i]);
            i--;
        }
        else {
            cout << "NO\n";
            return;
        }
    }

    // 엣지 교차 검사
    function<bool(Edge,Edge)> cross = [&](const Edge& ver, const Edge& hor) {
        pll p1 = ver.p1, p2 = ver.p2, p3 = hor.p1, p4 = hor.p2;
        if (p1==p3 || p1==p4 || p2==p3 || p2==p4)
            return false;
        if (p1.second<=p3.second&&p3.second<=p2.second
            && p3.first<=p1.first&&p1.first<=p4.first)
            return true;
        return false;
    };
    for (i=0; i<vertical.size(); i++)
        for (j=0; j<horizontal.size(); j++)
            if (cross(vertical[i], horizontal[j])) {
                cout << "NO\n";
                return;
            }

    // 연결 그래프 검사
    vvl G(mp.size());
    for (auto& [p1,p2] : vertical) {
        ll n1 = mp[p1], n2 = mp[p2];
        G[n1].emplace_back(n2);
        G[n2].emplace_back(n1);
    }
    for (auto& [p1, p2] : horizontal) {
        ll n1 = mp[p1], n2 = mp[p2];
        G[n1].emplace_back(n2);
        G[n2].emplace_back(n1);
    }
    vector<bool> visited(mp.size(), false);
    function<void(ll)> dfs = [&](ll node) {
        visited[node] = true;
        for (auto& e : G[node]) {
            if (!visited[e])
                dfs(e);
        }
    };
    dfs(0);
    for (auto e : visited) {
        if (!e) {
            cout << "NO\n";
            return;
        }
    }

    cout << "YES\n";
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}