#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

void calculate_pi(vl &pi, string &s) {
    pi[0]=-1;
    for (ll i=1,j=-1;i<s.size();i++) {
        while (j>=0 && s[i]!=s[j+1]) j=pi[j];
        if (s[i]==s[j+1]) pi[i]=++j;
        else pi[i]=-1;
    }
}

ll kmp(string& str, string& pattern) {
    vl pi(pattern.size());
    ll ans = 0;
    if (pattern.empty()) return ans;
    calculate_pi(pi, pattern);
    for (ll i=0,j=-1;i<str.size();i++) {
        while (j>=0 && str[i]!=pattern[j+1]) j=pi[j];
        if (str[i]==pattern[j+1]) {
            j++;
            if (j+1==pattern.size()) ans++, j=pi[j];
        }
    }
    return ans;
}

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    string pattern;
    char c;
    for (i=0; i<N; i++) {
        cin >> c;
        pattern += c;
    }
    string text;
    for (i=0; i<N; i++) {
        cin >> c;
        text += c;
    }
    text += text.substr(0, text.size()-1);
    ll bunja = kmp(text, pattern);
    function<ll(ll,ll)> GCD = [&](ll x, ll y) {
        return y ? GCD(y, x%y) : x;
    };
    ll gcd = GCD(bunja, N);
    cout << bunja/gcd << "/" << N/gcd;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}