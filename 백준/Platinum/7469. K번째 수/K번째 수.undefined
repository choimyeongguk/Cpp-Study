#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct MergeSortTree {
    const ll INF = 1e10;
    ll n; vl data; vvl tree;
    MergeSortTree(vl& arr)
        : n(arr.size()), data(arr), tree(n<<2) {
        segInit(1, 0, n-1);
    }
    void merge(vl& pa, const vl& chl, const vl& chr) {
        ll sz = chl.size() + chr.size() - 1;
        ll l = 0, r = 0;
        pa.resize(sz);
        for (ll i=0; i<sz; i++)
            pa[i] = chl[l]<chr[r] ? chl[l++] : chr[r++];
    }
    void segInit(ll i, ll s, ll e) {
        if (s==e) {
            tree[i] = { data[s], INF };
            return;
        }
        ll m = (s+e)>>1;
        segInit(i<<1, s, m);
        segInit(i<<1|1, m+1, e);
        merge(tree[i], tree[i<<1], tree[i<<1|1]);
    }
    // [l,r]구간에서 x이하인 값의 개수
    ll cnt_less(ll i, ll s, ll e, ll l, ll r, ll x) {
        if (s>r || e<l) return 0;
        if (l<=s && e<=r)
            return upper_bound(tree[i].begin(), tree[i].end(), x)
                    - tree[i].begin();
        ll m = (s+e)>>1;
        return cnt_less(i<<1, s, m, l, r, x) + cnt_less(i<<1|1, m+1, e, l, r, x);
    }
    ll cnt_less(ll l, ll r, ll x) { return cnt_less(1, 0, n-1, l, r, x); }
};

void solve(ll testcase){
    ll i, j, k;
    ll N, Q; cin >> N >> Q;
    vl arr(N), comp; comp.reserve(N);
    for (auto& e : arr) {
        cin >> e;
        comp.emplace_back(e);
    }
    sort(comp.begin(), comp.end());
    MergeSortTree seg(arr);

    ll li, ri, mi, cnt, ans;
    while (Q--) {
        cin >> i >> j >> k;
        i--, j--;
        li = 0, ri = N-1;
        while (li<=ri) {
            mi = (li+ri)>>1;
            cnt = seg.cnt_less(i, j, comp[mi]);
            // [i,j] 구간에서 comp[mi]이하인 값의 개수
            if (cnt >= k) {
                ans = comp[mi];
                ri = mi-1;
            }
            else li = mi+1;
        }
        cout << ans << "\n";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}