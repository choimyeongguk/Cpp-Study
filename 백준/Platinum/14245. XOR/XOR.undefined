#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct LazySeg {
    ll n; vl data, lazy;
    LazySeg(vl& arr)
        : n(arr.size()), data(arr), lazy(n<<2, 0) {
        segInit(1, 0, n-1);
    }
    void push(ll i, ll s, ll e) {
        if (!lazy[i]) return;
        if (s<e) {
            lazy[i<<1] ^= lazy[i];
            lazy[i<<1|1] ^= lazy[i];
        }
        lazy[i] = 0;
    }
    void segInit(ll i, ll s, ll e) {
        if (s==e) {
            lazy[i] = data[s];
            return;
        }
        ll m = (s+e)>>1;
        segInit(i<<1, s, m);
        segInit(i<<1|1, m+1, e);
    }
    void segUpdate(ll i, ll s, ll e, ll l, ll r, ll val) {
        if (s>r || e<l) return;
        if (l<=s && e<=r) {
            lazy[i] ^= val;
            return;
        }
        push(i, s, e);
        ll m = (s+e)>>1;
        segUpdate(i<<1, s, m, l, r, val);
        segUpdate(i<<1|1, m+1, e, l, r, val);
    }
    void update(ll l, ll r, ll val) {
        segUpdate(1, 0, n-1, l, r, val);
    }
    ll segQuery(ll i, ll s, ll e, ll pos) {
        if (s==e) return lazy[i];
        push(i, s, e);
        ll m = (s+e)>>1;
        return pos<=m ? segQuery(i<<1, s, m, pos) : segQuery(i<<1|1, m+1, e, pos);
    }
    ll query(ll pos) {
        return segQuery(1, 0, n-1, pos);
    }
};

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    vl arr(N); for (auto& e : arr) cin >> e;
    LazySeg tree(arr);
    ll Q; cin >> Q;
    ll op, a, b, c;
    while (Q--) {
        cin >> op;
        switch (op) {
            case 1:
                cin >> a >> b >> c;
                tree.update(a, b, c);
                break;
            case 2:
                cin >> a;
                cout << tree.query(a) << "\n";
                break;
        }
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}