#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct SCC {
    ll n, time = 0, cnt = 0;
    vl num, low, scc;
    vvl graph;
    stack<ll> st;
    SCC(vvl& g):
    n(g.size()), num(n, 0), low(n, 0), scc(n, -1), graph(g) {
        for (ll i=0; i<n; i++)
            if (!num[i])
                dfs(i);
    }
    void dfs(ll node) {
        st.push(node);
        num[node] = low[node] = ++time;
        for (auto& nxt : graph[node]) {
            if (!num[nxt]) {
                dfs(nxt);
                low[node] = min(low[node], low[nxt]);
            }
            else if (scc[nxt]==-1) low[node] = min(low[node], num[nxt]);
        }
        if (num[node] == low[node]) {
            ll x;
            do {
                x = st.top(); st.pop();
                scc[x] = cnt;
            } while (x != node);
            cnt++;
        }
    }
};


void solve(ll testcase){
    ll i, j, k;
    ll V, E; cin >> V >> E;
    vvl G(V);
    for (i=0; i<E; i++) {
        cin >> j >> k;
        if (j==k) continue;
        G[j-1].emplace_back(k-1);
    }

    SCC scc(G);
    ll numScc = scc.cnt;
    vl& sccIdx = scc.scc;
    vl in_degree(numScc, 0);
    for (i=0; i<V; i++) {
        for (auto& j : G[i]) {
            ll ii = sccIdx[i], jj = sccIdx[j];
            if (ii != jj) {
                in_degree[jj]++;
            }
        }
    }
    ll ans = 0;
    for (auto& e : in_degree) {
        if (!e)
            ans++;
    }
    cout << ans << "\n";
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}