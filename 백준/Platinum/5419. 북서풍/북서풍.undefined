#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct SegTree {
    ll n; vector<ll> tree;
    SegTree(ll n): n(n), tree(n<<2, 0) {}
    void segUpdate(ll i, ll s, ll e, ll pos) {
        tree[i]++;
        if (s!=e) {
            ll m = (s+e)>>1;
            if (pos <= m) segUpdate(i<<1, s, m, pos);
            else segUpdate(i<<1|1, m+1, e, pos);
        }
    }
    void update(ll pos) {
        segUpdate(1, 0, n-1, pos);
    }
    ll segQuery(ll i, ll s, ll e, ll l, ll r) {
        if (s>r || e<l) return 0;
        if (l<=s && e<=r) return tree[i];
        ll m = (s+e)>>1;
        return segQuery(i<<1, s, m, l, r) + segQuery(i<<1|1, m+1, e, l, r);
    }
    ll query(ll pos) {
        return segQuery(1, 0, n-1, 0, pos);
    }
};

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    vector<pll> island(N);
    vector<ll> Y;
    for (auto& [x,y] : island) {
        cin >> x >> y;
        y = -y;
        Y.emplace_back(y);
    }
    sort(island.begin(), island.end());
    sort(Y.begin(), Y.end());
    Y.erase(unique(Y.begin(), Y.end()), Y.end());

    ll ans = 0;
    SegTree tree(Y.size());
    for (auto& [x,y] : island) {
        y = lower_bound(Y.begin(), Y.end(), y) - Y.begin();
        ans += tree.query(y);
        tree.update(y);
    }
    cout << ans << "\n";
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}