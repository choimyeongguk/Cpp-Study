#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct Student {
    ll a, b, c;
};

struct SegTree {
    ll n; vl tree;
    SegTree(): n(500'001), tree(n<<2, 1e10) {}
    void update(ll i, ll s, ll e, ll pos, ll val) {
        if (s==e) {
            tree[i] = val;
            return;
        }
        ll m = (s+e)>>1;
        pos<=m ? update(i<<1, s, m, pos, val) : update(i<<1|1, m+1, e, pos, val);
        tree[i] = min(tree[i<<1], tree[i<<1|1]);
    }
    void update(ll pos, ll val) { update(1, 0, n-1, pos, val); }
    ll query(ll i, ll s, ll e, ll l, ll r) {
        if (s>r || e<l) return 1e10;
        if (l<=s && e<=r) return tree[i];
        ll m = (s+e)>>1;
        return min(query(i<<1, s, m, l, r), query(i<<1|1, m+1, e, l, r));
    }
    ll query(ll l, ll r) { return query(1, 0, n-1, l, r); }
};

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    vector<Student> student(N);
    for (i=0; i<N; i++) cin >> j, student[j-1].a = i;
    for (i=0; i<N; i++) cin >> j, student[j-1].b = i;
    for (i=0; i<N; i++) cin >> j, student[j-1].c = i;
    sort(student.begin(), student.end(), [](const Student& x, const Student& y) {
        return x.a < y.a;
    });

    ll ans = 0;
    SegTree seg;
    for (i=0; i<N; i++) {
        // a과목 등수는 높은 사람부터 보기
        // -> 나중에 보는 사람이 앞의 사람보다 대단한 경우는 없음
        if (seg.query(0, student[i].b) > student[i].c) {
            // 나보다 a과목 등수 높고, b과목 등수 높은 사람 중,
            // c과목 제일 잘 본 등수가 나보다 낮으면 -> 나보다 대단한 사람 없음
            ans++;
        }
        seg.update(student[i].b, student[i].c);
    }
    cout << ans;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}