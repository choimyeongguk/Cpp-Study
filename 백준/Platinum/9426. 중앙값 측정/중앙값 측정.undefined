#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct SegTree {
    ll n, k; vl tree;
    SegTree(ll K): n(65537), k((K+1)/2), tree(n<<2, 0) {}

    template <class F>
     void touchPath(ll i, ll s, ll e, ll val, F&& touch){
        touch(tree[i]);
        if (s==e) return;
        ll m = (s+e)>>1;
        if (val<=m) touchPath(i<<1,   s,   m, val, std::forward<F>(touch));
        else         touchPath(i<<1|1,m+1, e, val, std::forward<F>(touch));
    }
    void add(ll val)   { touchPath(1, 0, n-1, val, [](ll& x){ ++x; }); }
    void erase(ll val) { touchPath(1, 0, n-1, val, [](ll& x){ --x; }); }

    ll query(ll i, ll s, ll e, ll pos) {
        if (s==e) return s;
        return pos<=tree[i<<1] ? query(i<<1, s, (s+e)>>1, pos)
                               : query(i<<1|1, ((s+e)>>1)+1, e, pos-tree[i<<1]);
    }
    ll query() { return query(1, 0, n-1, k); }
};

void solve(ll testcase){
    ll i, j, k;
    ll N, K; cin >> N >> K;
    SegTree seg(K);
    queue<ll> q;
    ll num;
    seg.add(0);
    q.emplace(0);
    for (i=1; i<K; i++) {
        cin >> num;
        seg.add(num);
        q.emplace(num);
    }
    ll ans = 0;
    for (i=K-1; i<N; i++) {
        cin >> num;
        seg.erase(q.front());
        q.pop();
        seg.add(num);
        q.emplace(num);
        ans += seg.query();
    }
    cout << ans;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}