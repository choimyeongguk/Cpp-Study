#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct Tarjan {
    ll n, vtime;
    vvl graph;
    vl up, visit, cutVertex;

    Tarjan (vvl& graph)
        : n(graph.size()), graph(graph), up(n), visit(n,false), vtime(0) {
        for (ll i=1; i<n; i++)
            if (visit[i]==0) dfs(i, true);
        sort(cutVertex.begin(), cutVertex.end());
    }

    void dfs(ll node, bool isRoot){
        bool isCutVertex = false;
        ll childNum = 0;
        up[node] = visit[node] = ++vtime;
        for (auto& child : graph[node]){
            if (visit[child] == 0) { // 방문하지 않은 자식이면
                childNum++;
                dfs(child, false);
                up[node] = min(up[node], up[child]); // 되돌아갈 수 있는 가장 높은 노드
                if (!isRoot && up[child] >= visit[node])
                    isCutVertex = true;
            }
            else up[node] = min(up[node], visit[child]);
        }
        if (isRoot && childNum>1)
            isCutVertex = true;
        if (isCutVertex)
            cutVertex.emplace_back(node);
    }
};

void solve(ll testcase){
    ll i, j, k;
    ll V, E; cin >> V >> E;
    vvl graph(V+1);
    ll a, b;
    for (i=0; i<E; i++) {
        cin >> a >> b;
        graph[a].emplace_back(b);
        graph[b].emplace_back(a);
    }
    Tarjan cutVertex(graph);
    cout << cutVertex.cutVertex.size() << "\n";
    for (auto& e : cutVertex.cutVertex) {
        cout << e << " ";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}