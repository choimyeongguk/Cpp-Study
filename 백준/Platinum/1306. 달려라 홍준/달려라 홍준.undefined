#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct SegTree {
    ll n, m; vl data, tree;
    SegTree(vl& arr, ll M)
        : n((ll)arr.size()), m(M), data(arr), tree(n<<2, 0) {
        init(1, 0, n-1);
    }
    void init(ll i, ll s, ll e) {
        if (s==e) {
            tree[i] = data[s];
            return;
        }
        ll m = (s+e)>>1;
        init(i<<1, s, m);
        init(i<<1|1, m+1, e);
        tree[i] = max(tree[i<<1], tree[i<<1|1]);
    }
    ll query(ll i, ll s, ll e, ll l, ll r) {
        if (s>r || e<l) return 0;
        if (l<=s && e<=r) return tree[i];
        ll m = (s+e)>>1;
        return max(query(i<<1, s, m, l, r), query(i<<1|1, m+1, e, l, r));
    }
    ll query(ll loc) {
        return query(1, 0, n-1, loc-m+1, loc+m-1);
    }
};

void solve(ll testcase){
    ll i, j, k;
    ll N, M; cin >> N >> M;
    vl arr(N); for (auto& e : arr) cin >> e;
    SegTree seg(arr, M);
    for (i=M-1; i<=N-M; i++) {
        cout << seg.query(i) << " ";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}