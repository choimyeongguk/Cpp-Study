#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct SegTree {
    ll INF = 1e10;
    ll n; vl tree;
    SegTree(ll N): n(N+1), tree(n<<2, -INF) {}
    void segUpdate(ll i, ll s, ll e, ll pos, ll val) {
        tree[i] = max(tree[i], val);
        if (s!=e) {
            ll m = (s+e)>>1;
            pos<=m ? segUpdate(i<<1, s, m, pos, val)
                   : segUpdate(i<<1|1, m+1, e, pos, val);
        }
    }
    void update(ll pos, ll val) {
        segUpdate(1, 1, n, pos, val);
    }
    ll segQuery(ll i, ll s, ll e, ll l, ll r) {
        if (s>r || e<l) return -INF;
        if (l<=s && e<=r) return tree[i];
        ll m = (s+e)>>1;
        return max(segQuery(i<<1, s, m, l, r), segQuery(i<<1|1, m+1, e, l, r));
    }
    ll query(ll l, ll r) {
        return segQuery(1, 1, n, l, r);
    }
};

void solve(ll testcase){
    ll i, j, k;

    ll N, D; cin >> N >> D;
    vl dp(N+1, 0);
    SegTree seg(N+1);
    ll K;
    for (i=1; i<=N; i++) {
        cin >> K;
        dp[i] = max(seg.query(max(1LL, i-D), i) + K, K);
        seg.update(i, dp[i]);
    }
    cout << seg.tree[1];
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}