#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }else{
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preproces() {
    ll i, j, k;
}

struct SegTree {
    ll n; vl tree;
    SegTree(ll N): n(N), tree(n<<2, 0) {}
    void segUpdate(ll i, ll s, ll e, ll pos) {
        if (s==e) {
            tree[i] = 1;
            return;
        }
        tree[i]++;
        ll m = (s+e)>>1;
        if (pos<=m) segUpdate(i<<1, s, m, pos);
        else segUpdate(i<<1|1, m+1, e, pos);
    }
    void update(ll pos) {
        segUpdate(1, 0, n-1, pos);
    }
    ll segQuery(ll i, ll s, ll e, ll l, ll r) {
        if (s>r || e<l) return 0;
        if (l<=s && e<=r) return tree[i];
        ll m = (s+e)>>1;
        return segQuery(i<<1, s, m, l, r) + segQuery(i<<1|1, m+1, e, l, r);
    }
    ll query(ll l, ll r) {
        if (l>r) return 0;
        return segQuery(1, 0, n-1, l, r);
    }
};

void solve() {
    ll i, j, k;
    ll N; cin >> N;
    vl arr(N); for (auto& e : arr) {
        cin >> e;
        e--;
    }

    ll ans = 0;
    SegTree tree(N+1);
    for (i=0; i<N; i++) {
        ans += tree.query(arr[i], N);
        tree.update(arr[i]);
    }
    cout << ans;

    // ll ans = 0;
    // function<void(ll)> ssort = [&](ll cur) {
    //     for (auto& e : arr) cout << e << " ";
    //     cout << "\n";
    //     while (abs(arr[arr[cur]] - arr[cur]) != 1) {
    //         ssort(arr[cur]);
    //     }
    //     swap(arr[arr[cur]], arr[cur]);
    //     ans++;
    // };
    //
    // for (i=1; i<=N; i++) {
    //     if (arr[i]==i) continue;
    //     ssort(i);
    // }
    // cout << ans;
}

int main() {
    setup();
    preproces();
    ll t = 1;
    // cin >> t;
    for (ll test=1; test<=t; test++) {
        solve();
    }
    return 0;
}