#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

void solve(ll testcase){
    ll i, j, k;

    // 입력
    ll N; cin >> N;
    vl energy(N+1); for (i=1; i<=N; i++) cin >> energy[i];
    vector<vector<pll>> G(N+1);
    ll a, b, c;
    for (i=1; i<N; i++) {
        cin >> a >> b >> c;
        G[a].emplace_back(c, b);
        G[b].emplace_back(c, a);
    }

    // 깊이배열, 희소배열 계산
    ll MAXLN = 1; while (1<<MAXLN<=N) MAXLN++;
    vl depth(N+1, 0);
    vvl anc(MAXLN, vl(N+1, 0));
    function<void(ll,ll)> dfs = [&](ll node, ll parent) {
        for (auto& [cost,next] : G[node]) {
            if (next == parent) continue;
            depth[next] = depth[node] + cost;
            anc[0][next] = node;
            dfs(next, node);
        }
    };
    dfs(1, 0);
    anc[0][1] = 1;
    for (i=1; i<MAXLN; i++)
        for (j=1; j<=N; j++)
            anc[i][j] = anc[i-1][anc[i-1][j]];

    // 정답 계산
    for (i=1; i<=N; i++) {
        ll cur = i, eng = energy[i];
        for (j=MAXLN-1; j>=0; j--) {
            if (eng >= depth[cur] - depth[anc[j][cur]]) {
                eng -= depth[cur] - depth[anc[j][cur]];
                cur = anc[j][cur];
                if (!eng) break;
            }
        }
        cout << cur << "\n";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}