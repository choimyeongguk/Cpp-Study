#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using vl = vector<ll>;
using vvl = vector<vl>;
using tlll = tuple<ll,ll,ll>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

constexpr ll MOD = 31991;

struct Matrix {
    ll r, c;
    vvl arr;
    Matrix(ll r, ll c) : r(r), c(c), arr(r, vl(c)) {}
    Matrix mul(const Matrix &o) const {
        assert(c==o.r);
        Matrix ret(r, o.c);
        for (ll i=0;i<r;i++) {
            for (ll j=0;j<o.c;j++) {
                for (ll k=0;k<c;k++) {
                    ret.arr[i][j] += (arr[i][k] * o.arr[k][j])%MOD;
                    ret.arr[i][j] %= MOD;
                }
            }
        }
        return ret;
    }
};

Matrix I(ll n) {
    Matrix ret(n, n);
    for (ll i=0;i<n;i++) ret.arr[i][i]=1;
    return ret;
}

Matrix __pow(Matrix m, ll k) {
    Matrix ret = I(m.r);
    if (k==0) return ret;
    while (k) {
        if (k&1) ret = ret.mul(m);
        m = m.mul(m);
        k >>= 1;
    }
    return ret;
}

void solve() {
    ll i, j, k;
    ll d, t; cin>>d>>t;
    vl arr(d);
    arr[0] = 1;
    for (i=1;i<d;i++) {
        for (j=0;j<i;j++) {
            arr[i] += arr[j];
            arr[i] %= MOD;
        }
    }
    if (t<d) {
        cout<<arr[t]<<'\n';
        return;
    }
    reverse(arr.begin(), arr.end());
    Matrix m(d, 1);
    for (i=0;i<d;i++) m.arr[i][0] = arr[i];
    Matrix a(d, d);
    for (i=0;i<d;i++) a.arr[0][i] = 1;
    for (i=0;i<d-1;i++) a.arr[i+1][i] = 1;
    // for (i=0;i<d;i++) {
    //     for (j=0;j<d;j++) {
    //         cout<<a.arr[i][j]<<' ';
    //     }
    //     cout<<endl;
    // }
    cout<<__pow(a, t-d+1).mul(m).arr[0][0]<<'\n';
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test=1; test<=t; test++) {
        solve();
    }
    return 0;
}