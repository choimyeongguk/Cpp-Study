#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
template<typename T> using ordered_set
    = tree<T, null_type, less<>, rb_tree_tag,
        tree_order_statistics_node_update>;
template<typename T> using ordered_multiset
    = tree<T, null_type, less_equal<>, rb_tree_tag,
        tree_order_statistics_node_update>;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    vector<string> num(N);
    for (auto& e : num) cin >> e;
    ll K; cin >> K;

    // 00...0 ~ 11...1 까지 상태의 개수 +1
    ll MAX = pow(2, N);

    // 각 조합별 길이 계산
    vector<ll> sz(MAX, 0);
    for (i=0; i<MAX; i++)
        for (j=0; j<N; j++)
            if (i & 1<<j)
                sz[i] += (ll)num[j].size();

    // 각 숫자 나머지 계산
    vector<ll> rem(N, 0);
    for (i=0; i<N; i++)
        for (auto& c : num[i])
            rem[i] = (rem[i]*10 + c-'0') %K;

    // 10의 제곱꼴의 나머지 계산 50*15 = 750
    vector<ll> rem10(750, 0);
    rem10[0] = 1;
    for (i=1; i<750; i++) {
        rem10[i] = rem10[i-1] * 10 %K;
    }

    // dp[i][j] = i조합으로 만든 숫자 순열들 중, 나머지가 j인 순열의 개수
    vector<vector<ll>> dp(MAX, vector<ll>(K, 0));
    dp[0][0] = 1;
    for (i=0; i<MAX; i++) {         // status
        for (j=0; j<K; j++) {       // remainder
            for (k=0; k<N; k++) {   // adding num
                if (!(i & 1<<k)) {  // 추가할 수 있으면
                    ll remainder = (j + rem[k] * rem10[sz[i]] %K) %K;
                    dp[i | 1<<k][remainder] += dp[i][j];
                }
            }
        }
    }

    // 나머지0(정답)과 전체 개수 비율 계산
    ll all, ans, d;
    all = ans = dp[MAX-1][0];
    for (i=1; i<K; i++) {
        all += dp[MAX-1][i];
    }
    d = gcd(all, ans);
    all /= d;
    ans /= d;
    cout << ans << "/" << all;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}