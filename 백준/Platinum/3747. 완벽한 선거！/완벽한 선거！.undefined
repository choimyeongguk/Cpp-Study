#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

// Usage: operation(lit(x), lit(y)); bool satisfiable = TwoSAT.solve()
// memo : 1-based variable
// O(N + M)  N:#variable M:#relation
struct SCC {
    ll n, time = 0, cnt = 0;
    vl scc_idx, num, low;
    vvl graph;
    stack<ll> st;
    SCC(vvl& G):    // 1-base graph
    n(G.size()-1), scc_idx(n+1, 0), num(n+1, 0), low(n+1, 0), graph(G) {
        for (ll i=1; i<=n; i++)
            if (!num[i])
                dfs(i);
    }
    void dfs(ll node) {
        st.emplace(node);
        num[node] = low[node] = ++time;
        for (auto& nxt: graph[node]) {
            if (!num[nxt]) {
                dfs(nxt);
                low[node] = min(low[node], low[nxt]);
            }
            else if (!scc_idx[nxt])
                low[node] = min(low[node], num[nxt]);
        }
        if (num[node] == low[node]) {
            ll x; cnt++;
            do {
                x = st.top(); st.pop();
                scc_idx[x] = cnt;
            } while (x != node);
        }
    }
};

inline ll neg(ll x) { return x%2 ? x+1 : x-1; }
inline ll lit(ll x) { return x>0 ? (x<<1)-1 : -x<<1; }
struct TwoSAT {
    ll N;          // # boolean variables
    vvl g;         // 1-based, size = 2*N+1
    vl assignment; // final truth values: +1=true, -1=false

    TwoSAT(ll vars) : N(vars), g((N<<1)+1), assignment(N+1, 0) {}

    void addImp(ll u, ll v) {
        g[u].push_back(v);
    }

    void addOr(ll x, ll y) {
        addImp(neg(x), y);
        addImp(neg(y), x);
    }

    void addTrue(ll x) {
        addImp(neg(x), x);
    }

    bool solve() {
        SCC scc(g);
        auto& comp = scc.scc_idx;
        for (ll i=1; i<=N; i++)
            if (comp[(i<<1)-1] == comp[i<<1])
                return false;
        // for (ll i=1; i<=N; i++)
        //     assignment[i] = comp[(i<<1)-1]<comp[i<<1] ? +1 : -1;
        return true;
    }
};

void solve(ll testcase){
    ll i, j, k;
    while (true) {
        ll N, M;
        if (!(cin >> N >> M)) break;
        TwoSAT sat(N);
        while (M--) {
            cin >> i >> j;
            sat.addOr(lit(i), lit(j));
        }
        cout << sat.solve() << "\n";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}