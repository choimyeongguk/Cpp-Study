#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
template<typename T> using ordered_set
    = tree<T, null_type, less<>, rb_tree_tag,
        tree_order_statistics_node_update>;
template<typename T> using ordered_multiset
    = tree<T, null_type, less_equal<>, rb_tree_tag,
        tree_order_statistics_node_update>;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

// ll f(ll x, string num) {
//     if (num.empty()) return 0;
//     if (num.size()==1) return x<=stoll(num) ? 1 : 0;
//
//     ll tmp = f(x, to_string((ll)pow(10, num.size()-1)-1));
//     // ll tmp = pow(10, num.size()-1) - pow(9, num.size()-1);
//     ll ret = 0;
//     for (ll i=0; i<num[0]-'0'; i++) {
//         ret += tmp;
//         if (i==x) {
//             ret += pow(10, num.size()-1);
//         }
//     }
//     if (num[0]-'0' == x && num.size()>1) {
//         ret += stoll(num.substr(1)) + 1;
//     }
//     ret += f(x, num.substr(1));
//     return ret;
// }

void solve(ll testcase){
    ll i, j, k, d;
    ll N;
    cin >> N;
    vector<ll> cnt(10, 0);
    ll factor = 1, lower, curr, higher;
    while (factor <= N) {
        lower = N % factor;
        curr = N / factor % 10;
        higher = N / (factor * 10);

        for (d = 0; d <= 9; d++) {
            // 현재 자리에서 숫자가 몇 번 등장하느냐?
            // 앞자리가 0 - (higher-1) 인 경우에 대해 세기
            cnt[d] += higher * factor;
        }
        // 00...00 0 [] 꼴인 경우 빼주기
        cnt[0] -= factor;

        // 앞자리가 higher인 경우에 대해 세기
        for (d = 0; d <= curr; d++) {
            if (curr > d)        cnt[d] += factor;
            else if (curr == d)  cnt[d] += lower + 1;
        }

        factor *= 10;
    }

    for (d = 0; d <= 9; d++)
        cout << cnt[d] << " ";
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}