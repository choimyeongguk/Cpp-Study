#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef pair<ll, ll> pll;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
template<typename T> using ordered_set
    = tree<T, null_type, less<>, rb_tree_tag,
        tree_order_statistics_node_update>;
template<typename T> using ordered_multiset
    = tree<T, null_type, less_equal<>, rb_tree_tag,
        tree_order_statistics_node_update>;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct segTree2D {
    ll n, sz;
    vector<vector<ll>> data, tree;
    segTree2D(ll n): n(n), sz(2*pow(2,ceil(log2(n)))), data(n, vector<ll>(n)), tree(sz, vector<ll>(sz)) {};
    void segInit1D(ll i, ll cs, ll ce, ll idx, ll r) {
        if (cs==ce) {
            tree[idx][i] = data[r][cs];
            return;
        }
        ll m = (cs+ce)>>1;
        segInit1D(i<<1, cs, m, idx, r);
        segInit1D(i<<1|1, m+1, ce, idx, r);
        tree[idx][i] = tree[idx][i<<1]+tree[idx][i<<1|1];
    }
    void segInit2D(ll i, ll rs, ll re) {
        if (rs==re) {
            segInit1D(1, 0, n-1, i, rs);
            return;
        }
        ll m = (rs+re)>>1;
        segInit2D(i<<1, rs, m);
        segInit2D(i<<1|1, m+1, re);
        ll l=i<<1, r=i<<1|1;
        for (ll j=1; j<sz; j++)
            tree[i][j] = tree[l][j]+tree[r][j];
    }
    void init(const vector<vector<ll>>& arr) {
        data = arr;
        segInit2D(1, 0, n-1);
    }

    void segUpdate1D(ll i, ll cs, ll ce, ll r, ll pos, ll dif) {
        if (cs>pos || ce<pos) return;
        tree[r][i] += dif;
        if (cs==ce) return;
        ll m = (cs+ce)>>1;
        segUpdate1D(i<<1, cs, m, r, pos, dif);
        segUpdate1D(i<<1|1, m+1, ce, r, pos, dif);
    }
    void segUpdate2D(ll i, ll rs, ll re, ll r, ll c, ll dif) {
        if (rs>r || re<r) return;
        segUpdate1D(1, 0, n-1, i, c, dif);
        if (rs==re) return;
        ll m = (rs+re)>>1;
        segUpdate2D(i<<1, rs, m, r, c, dif);
        segUpdate2D(i<<1|1, m+1, re, r, c, dif);
    }
    void update(ll r, ll c, ll dif) {
        segUpdate2D(1, 0, n-1, r, c, dif);
    }

    ll segQuery1D(ll i, ll cs, ll ce, ll r, ll c1, ll c2) {
        if (cs>c2 || ce<c1) return 0;
        if (c1<=cs && ce<=c2) return tree[r][i];
        ll m = (cs+ce)>>1;
        return segQuery1D(i<<1, cs, m, r, c1, c2)+segQuery1D(i<<1|1, m+1, ce, r, c1, c2);
    }
    ll segQuery2D(ll i, ll rs, ll re, ll r1, ll c1, ll r2, ll c2) {
        if (rs>r2 || re<r1) return 0;
        if (r1<=rs && re<=r2) return segQuery1D(1, 0, n-1, i, c1, c2);
        ll m = (rs+re)>>1;
        return segQuery2D(i<<1, rs, m, r1, c1, r2, c2)
            + segQuery2D(i<<1|1, m+1, re, r1, c1, r2, c2);
    }
    ll query(ll r1, ll c1, ll r2, ll c2) {
        return segQuery2D(1, 0, n-1, r1, c1, r2, c2);
    }
};

void solve(ll testcase){
    ll i, j, k;
    ll N, Q; cin >> N >> Q;
    vector<vector<ll>> arr(N, vector<ll>(N));
    for (auto&e:arr) for (auto&v:e) cin >> v;
    segTree2D tree(N);
    tree.init(arr);

    ll w, r, c, val, r1, c1, r2, c2;
    for (i=0; i<Q; i++) {
        cin >> w;
        switch (w) {
            case 0:
                cin >> r >> c >> val;
                --r, --c;
                tree.update(r, c, val-arr[r][c]);
                arr[r][c] = val;
                break;
            case 1:
                cin >> r1 >> c1 >> r2 >> c2;
                cout << tree.query(r1-1, c1-1, r2-1, c2-1) << "\n";
                break;
        }
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}