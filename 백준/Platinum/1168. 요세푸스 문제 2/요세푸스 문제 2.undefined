#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct SegTree {
    ll n; vl tree;
    SegTree(ll n)
        : n(n), tree(n<<2) {
        segInit(1, 0, n-1);
    }
    void segInit(ll i, ll s, ll e) {
        if (s==e) { tree[i] = 1; return; }
        ll m = (s+e)>>1;
        segInit(i<<1, s, m);
        segInit(i<<1|1, m+1, e);
        tree[i] = tree[i<<1] + tree[i<<1|1];
    }
    ll segUpdate(ll i, ll s, ll e, ll pos) {
        if (s==e) { tree[i] = 0; return s; }
        ll m = (s+e)>>1;
        ll ret = pos<tree[i<<1] ? segUpdate(i<<1, s, m, pos)
                                : segUpdate(i<<1|1, m+1, e, pos-tree[i<<1]);
        tree[i] = tree[i<<1] + tree[i<<1|1];
        return ret;
    }
    ll popNth(ll pos) { return segUpdate(1, 0, n-1, pos); }
};

void solve(ll testcase){
    ll i, j, k;
    ll N, K; cin >> N >> K;
    vl ans; ans.reserve(N);
    ll cur = -1;
    SegTree seg(N);
    while (N--) {
        cur = (cur + K) %(N+1);
        ans.emplace_back(seg.popNth(cur)+1);
        cur--;
    }
    cout << "<";
    for (i=0; i<ans.size()-1; i++)
        cout << ans[i] << ", ";
    cout << ans.back() << ">";
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}