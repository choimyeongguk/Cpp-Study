#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

void solve(ll testcase){
    ll i, j, k;
    ll N, M, K; cin >> N >> M >> K;
    vector<vector<pll>> G(N+1);
    ll a, b, c;
    for (i=0; i<M; i++) {
        cin >> a >> b >> c;
        G[a].emplace_back(c, b);
    }

    ll remain = N;
    vl visited(N+1, 0);
    vl ans(N+1, -1);
    priority_queue<pll,vector<pll>,greater<>> pq;   // (거리,정점)
    pq.emplace(0, 1);
    while (remain > 0 && !pq.empty()) {
        auto [dist,node] = pq.top(); pq.pop();
        if (visited[node] >= K) continue;
        visited[node]++;
        if (visited[node] == K) {
            ans[node] = dist;
            remain--;
        }
        for (auto& [cost,nxt] : G[node]) {
            if (visited[nxt] < K)
                pq.emplace(dist+cost, nxt);
        }
    }
    for (i=1; i<=N; i++) cout << ans[i] << "\n";
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}