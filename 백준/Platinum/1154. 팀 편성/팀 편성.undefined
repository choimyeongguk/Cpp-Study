#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    vvl G(N+1);
    ll a, b;
    while (true) {
        cin >> a >> b;
        if (a==-1) break;
        G[a].emplace_back(b);
        G[b].emplace_back(a);
    }

    vl color(N+1, 0);
    vector<bool> linked(N+1);
    queue<ll> q;
    color[1] = 1;
    q.emplace(1);
    while (!q.empty()) {
        ll& cur = q.front();
        fill(linked.begin(), linked.end(), false);
        for (auto& e : G[cur])
            linked[e] = true;
        for (ll nxt=1; nxt<=N; nxt++) {
            if (cur==nxt || linked[nxt]) continue;
            if (color[cur] == color[nxt]) {
                cout << "-1";
                return;
            }
            if (!color[nxt]) {
                color[nxt] = -color[cur];
                q.emplace(nxt);
            }
        }
        q.pop();
    }
    cout << "1\n";
    ll first = color[1];
    for (i=1; i<=N; i++)
        if (color[i] == first)
            cout << i << " ";
    cout << "-1\n";
    for (i=1; i<=N; i++)
        if (color[i] != first)
            cout << i << " ";
    cout << "-1";
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}