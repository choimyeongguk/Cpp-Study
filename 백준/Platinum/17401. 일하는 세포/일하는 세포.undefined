#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

const ll MOD = 1000000007;

struct Matrix {
    ll n; vvl m;
    Matrix(): n(0), m(0) {}
    Matrix(vvl& m): n(m.size()), m(m) {}
    Matrix(ll n): n(n), m(n, vl(n, 0)) {
        for (ll i=0; i<n; i++)
            m[i][i] = 1;
    }
    Matrix operator* (const Matrix& rhs) const {
        vvl ret(n, vl(n));
        for (ll r=0; r<n; r++)
            for (ll c=0; c<n; c++)
                for (ll i=0; i<n; i++)
                    ret[r][c] = (ret[r][c] + m[r][i]*rhs.m[i][c] %MOD) %MOD;
        return Matrix(ret);
    }
    friend ostream& operator<<(ostream& os, const Matrix& mat) {
        for (auto& e : mat.m) {
            for (auto& v : e)
                cout << v << " ";
            cout << "\n";
        }
        return os;
    }
};

Matrix pow(Matrix& mat, ll e) {
    Matrix ret(mat.n);
    while (e > 0) {
        if (e & 1)
            ret = ret * mat;
        mat = mat * mat;
        e >>= 1;
    }
    return ret;
}

void solve(ll testcase){
    ll i, j, k;
    ll T, N, D; cin >> T >> N >> D;
    vector<Matrix> M(T);
    for (i=0; i<T; i++) {
        ll Mi; cin >> Mi;
        ll a, b, c;
        vvl tmp(N, vl(N));
        for (j=0; j<Mi; j++) {
            cin >> a >> b >> c;
            tmp[a-1][b-1] = c;
        }
        M[i] = tmp;
    }

    Matrix walkM(N);
    for (i=0; i<D%T; i++)
        walkM = walkM * M[i];
    Matrix remain = walkM;
    for (i=D%T; i<T; i++)
        walkM = walkM * M[i];
    cout << pow(walkM, D/T) * remain;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}