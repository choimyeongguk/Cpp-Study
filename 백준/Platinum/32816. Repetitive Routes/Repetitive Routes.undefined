#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct SegTree {
    ll n; vl tree;
    SegTree(ll N): n(N), tree(n<<2, 0) {}
    void update(ll i, ll s, ll e, ll pos) {
        tree[i]++;
        if (s==e) return;
        ll m = (s+e)>>1;
        pos<=m ? update(i<<1, s, m, pos) : update(i<<1|1, m+1, e, pos);
    }
    void update(ll pos) { update(1, 0, n-1, pos); }
    ll query(ll i, ll s, ll e, ll l, ll r) {
        if (s>r || e<l) return 0;
        if (l<=s && e<=r) return tree[i];
        ll m = (s+e)>>1;
        return query(i<<1, s, m, l, r) + query(i<<1|1, m+1, e, l, r);
    }
    ll query(ll l, ll r) { return query(1, 0, n-1, l, r); }
};

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    ll N2 = N*2;
    vl prev(N2, -1), visit(N2+1, -1);
    vl range(N+1, -1);
    vvl query(N2+1);
    ll customer, location;
    for (i=0; i<N2; i++) {
        cin >> customer >> location;

        if (visit[location] != -1)
            prev[i] = visit[location];
        visit[location] = i;

        if (range[customer] == -1)
            range[customer] = i;
        else query[range[customer]].emplace_back(i);
    }

    vvl pos(N2+1);
    for (i=0; i<N2; i++) {
        ll& p = prev[i];
        if (p != -1) pos[p].emplace_back(i);
    }

    SegTree seg(N2);
    ll ans = 0;
    for (i=N2-1; i>=0; i--) {
        for (auto& e : pos[i]) seg.update(e);
        for (auto& e : query[i])
            ans += seg.query(i, e);
    }
    cout << ans;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}