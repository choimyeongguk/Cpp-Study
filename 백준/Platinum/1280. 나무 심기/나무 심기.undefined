#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

const ll MAX = 200'000, MOD = 1'000'000'007;

struct SegTree {
    ll n; vector<pll> tree; // 구간 개수, 구간 합
    SegTree(): n(MAX), tree(MAX<<2, {0, 0}) {}
    void update(ll pos) { update(1, 0, n-1, pos); }
    void update(ll i, ll s, ll e, ll pos) {
        tree[i].first++;
        tree[i].second += pos;
        if (s==e) return;
        ll m = (s+e)>>1;
        pos<=m ? update(i<<1, s, m, pos) : update(i<<1|1, m+1, e, pos);
    }
    pll query(ll l, ll r) { return l>r ? pll{0, 0} : query(1, 0, n-1, l, r); }
    pll query(ll i, ll s, ll e, ll l, ll r) {
        if (s>r || e<l) return {0, 0};
        if (l<=s && e<=r) return tree[i];
        ll m = (s+e)>>1;
        auto [lcnt, lsum] = query(i<<1, s, m, l, r);
        auto [rcnt, rsum] = query(i<<1|1, m+1, e, l, r);
        return {lcnt+rcnt, lsum+rsum};
    }
};

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    SegTree seg;
    ll ans = 1;

    ll num; cin >> num;
    seg.update(num);
    for (i=1; i<N; i++) {
        cin >> num;
        auto [lcnt, lsum] = seg.query(0, num-1);
        auto [rcnt, rsum] = seg.query(num+1, MAX-1);
        ll tmp = (num*(lcnt-rcnt) + rsum - lsum) %MOD;
        ans = ans * tmp %MOD;
        seg.update(num);
    }
    cout << ans;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}