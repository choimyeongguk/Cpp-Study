#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
template<typename T> using ordered_set
    = tree<T, null_type, less<>, rb_tree_tag,
        tree_order_statistics_node_update>;
template<typename T> using ordered_multiset
    = tree<T, null_type, less_equal<>, rb_tree_tag,
        tree_order_statistics_node_update>;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct SegTree {
    ll n; vl tree;
    SegTree(): n(1'000'000), tree(n<<2, 0) {}
    void segPush(ll i, ll s, ll e, ll flavor, ll num) {
        if (s>flavor || e<flavor) return;
        if (s==e) {
            tree[i] += num;
            return;
        }
        ll m = (s+e)>>1;
        segPush(i<<1, s, m, flavor, num);
        segPush(i<<1|1, m+1, e, flavor, num);
        tree[i] = tree[i<<1]+tree[i<<1|1];
    }
    void push(ll flavor, ll num) {
        segPush(1, 0, n-1, flavor, num);
    }
    ll segPop(ll i, ll s, ll e, ll ord) {
        if (s==e) {
            tree[i]--;
            return s;
        }
        ll m = (s+e)>>1;
        ll ret = ord<=tree[i<<1] ? segPop(i<<1, s, m, ord) : segPop(i<<1|1, m+1, e, ord-tree[i<<1]);
        tree[i] = tree[i<<1]+tree[i<<1|1];
        return ret;
    }
    ll pop(ll ord) {
        return segPop(1, 0, n-1, ord);
    }
};

void solve(ll testcase){
    ll i, j, k;
    ll Q; cin >> Q;
    ll A, B, C;
    SegTree tree;
    while (Q--) {
        cin >> A;
        switch (A) {
            case 1:
                cin >> B;
                cout << tree.pop(B)+1 << "\n";
                break;
            case 2:
                cin >> B >> C;
                tree.push(B-1, C);
                break;
        }
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}