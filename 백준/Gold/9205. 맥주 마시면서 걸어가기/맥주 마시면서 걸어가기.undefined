#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

ll dist(const pll& a, const pll& b) {
    return abs(a.first-b.first) + abs(a.second-b.second);
}

void solve(ll testcase){
    ll i, j, k;
    const ll MAX = 1000;
    ll N; cin >> N;
    pll from; cin >> from.first >> from.second;
    vector<pll> bia(N);
    for (auto& [f,s] : bia)
        cin >> f >> s;
    pll to; cin >> to.first >> to.second;

    vvl G(N+2);
    ll d;
    if ((d=dist(from, to)) <= MAX)
        G[N].emplace_back(N+1);
    for (i=0; i<N; i++)
        if ((d=dist(from, bia[i])) <= MAX)
            G[N].emplace_back(i);
    for (i=0; i<N; i++) {
        if ((d=dist(bia[i], to)) <= MAX)
            G[i].emplace_back(N+1);
        for (j=i+1; j<N; j++) {
            if ((d=dist(bia[i], bia[j])) <= MAX) {
                G[i].emplace_back(j);
                G[j].emplace_back(i);
            }
        }
    }

    vl visit(N+2, false);
    queue<ll> q;
    q.emplace(N), visit[N] = true;
    while (!q.empty()) {
        ll cur = q.front(); q.pop();
        if (cur == N+1) {
            cout << "happy\n";
            return;
        }
        for (auto& nxt : G[cur]) {
            if (visit[nxt]) continue;
            visit[nxt] = true;
            q.emplace(nxt);
        }
    }
    cout << "sad\n";
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}