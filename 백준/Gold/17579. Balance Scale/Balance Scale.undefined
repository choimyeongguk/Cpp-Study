#include <bits/stdc++.h>
#pragma warnig(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

void solve(ll test) {
    ll i, j, k;
    while (true) {
        ll N, M; cin >> N >> M;
        if (!N && !M) break;
        vl arr(N); for (auto& e : arr) cin >> e;
        set<ll> canMake; canMake.insert(0);
        for (i=0; i<M; i++) {
            ll num; cin >> num;
            set<ll> newCanMake;
            newCanMake.insert(num);
            for (auto& e : canMake) {
                newCanMake.insert(e);
                newCanMake.insert(e + num);
                newCanMake.insert(abs(e - num));
            }
            canMake = move(newCanMake);
        }

        // cout << "canMake : ";
        // for (auto& e : canMake) cout << e << " ";
        // cout << "\n";

        ll cnt = 0;
        set<ll> ans;
        // ans 초기 구성
        for (i=0; i<N; i++) {
            if (canMake.contains(arr[i])) { // 이미 만들 수 있으면 넘김
                cnt++;
                continue;
            }
            // 만들 수 없는 경우
            for (auto& e : canMake) {
                ans.insert(e + arr[i]);
                ans.insert(abs(e - arr[i]));
            }
            break;
        }

        // cout << "초기 ans : ";
        // for (auto& e : ans) cout << e << " ";
        // cout << "\n";

        if (cnt == N) {     // 이미 전부 만들 수 있는 경우
            cout << "0\n";
            continue;
        }

        // 정답 찾기
        i++;
        for (; i<N; i++) {
            if (canMake.contains(arr[i]))
                continue;
            set<ll> newAns;
            for (auto& e : canMake) {
                if (ans.contains(e + arr[i]))
                    newAns.insert(e + arr[i]);
                if (ans.contains(abs(e - arr[i])))
                    newAns.insert(abs(e - arr[i]));
            }
            ans = move(newAns);
        }
        if (ans.empty())
            cout << "-1\n";
        else cout << *ans.begin() << "\n";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test = 1; test<=t; test++) {
        solve(test);
    }
    return 0;
}