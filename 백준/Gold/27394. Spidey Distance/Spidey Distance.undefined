#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

// ll dr[] = {0, 1, 0, -1, 1, 1, -1, -1};
// ll dc[] = {1, 0, -1, 0, -1, 1, -1, 1};
//
// ll f(ll n) {
//     map<pll, ll> vis;
//     set<pll> cnt;
//     function<ll(ll, ll, ll)> dfs = [&vis, &n, &cnt, &dfs](ll r, ll c, ll cost) -> ll {
//         // cout<<r<<' '<<c<<endl;
//         cnt.insert({r, c});
//         ll ret=1;
//         for (ll i=4;i<8;i++) {
//             ll nr = r+dr[i];
//             ll nc = c+dc[i];
//             if (vis.contains({nr, nc}) && vis[{nr, nc}] <= cost+3) continue;
//             if (cost+3 > 2*n) continue;
//             vis[{nr, nc}] = cost+3;
//             ret += dfs(nr, nc, cost+3);
//         }
//         for (ll i=0;i<4;i++) {
//             ll nr = r+dr[i];
//             ll nc = c+dc[i];
//             if (vis.contains({nr, nc}) && vis[{nr, nc}] <= cost+2) continue;
//             if (cost+2 > 2*n) continue;
//             vis[{nr, nc}] = cost+2;
//             ret += dfs(nr, nc, cost+2);
//         }
//         return cnt.size();
//     };
//     vis[{0, 0}]=0;
//     ll ret=dfs(0, 0, 0);
//     for (ll i=0;i<10;i++) {
//         for (ll j=0;j<10;j++) {
//             if (vis.contains({i, j})) cout<<"O ";
//             else cout<<". ";
//         }
//         cout<<endl;
//     }
//     return ret;
// }
//
// ll f2(ll n) {
//     ll scnt=1;
//     for (ll k=0;k<=n-1;k++) {
//         scnt += 4*(k+1+(k+1)/3);
//     }
//     return scnt;
// }

void preprocess() {
    ll i, j, k;
    // f(6);
}

void solve() {
    ll i, j, k;
    ll t, s; cin>>t>>s;
    ll tcnt = t*t+(t+1)*(t+1);
    ll scnt = 1;
    for (k=0;k<=s-1;k++) {
        scnt += 4*(k+1+(k+1)/3);
    }
    if (t<=s) {
        // cout<<tcnt<<' '<<scnt<<endl;
        if (tcnt > scnt) tcnt=scnt;
        ll g = gcd(tcnt, scnt);
        tcnt/=g, scnt/=g;
        if (scnt==1) cout<<"1\n";
        else cout<<tcnt<<'/'<<scnt<<'\n';
        return;
    }
    if (t > s+s/3) {
        cout<<"1\n";
        return;
    }
    vl arr(s/3);
    for (i=0;i<s/3;i++) arr[i]=s-2-3*i;
    ll cnt=scnt;
    for (i=t-s;i<s/3;i++)
        cnt-=4*arr[i];
    // cout<<cnt<<' '<<scnt<<endl;
    ll g = gcd(cnt, scnt);
    cnt/=g, scnt/=g;
    if (scnt==1) cout<<"1\n";
    else cout<<cnt<<'/'<<scnt<<'\n';
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test=t; test<=t; test++) {
        solve();
    }
    return 0;
}
