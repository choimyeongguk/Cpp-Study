#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

void solve(ll testcase){
    ll i, j, k;
    ll V, E; cin >> V >> E;
    vvl G(V);
    ll a, b;
    for (i=0; i<E; i++) {
        cin >> a >> b;
        G[a].emplace_back(b);
        G[b].emplace_back(a);
    }
    vl visit(V, false);
    function<bool(ll,ll)> back_track = [&](ll node, ll depth) {
        visit[node] = true;
        if (depth == 4) return true;
        for (auto& nxt : G[node]) {
            if (visit[nxt]) continue;
            if (back_track(nxt, depth+1))
                return true;
        }
        visit[node] = false;
        return false;
    };
    for (i=0; i<V; i++) {
        fill(visit.begin(), visit.end(), false);
        if (back_track(i, 0)) {
            cout << 1;
            return;
        }
    }
    cout << 0;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}