#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize ("O3, unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {

}

void solve(ll testcase) {
    ll i, j, k;
    // R, C 입력
    ll R, C; cin >> R >> C;

    // start, end 좌표 입력
    string input;
    ll sr, sc, tr, tc;
    cin >> input; sr = stoll(input.substr(1));
    cin >> input; sc = stoll(input.substr(0, input.size()-1));
    cin >> input; tr = stoll(input.substr(1));
    cin >> input; tc = stoll(input.substr(0, input.size()-1));
    sr--, sc--, tr--, tc--;

    // map 입력
    vector<vector<char>> M(R, vector<char>(C));
    for (auto& e : M)
        for (auto& v : e)
            cin >> v;

    // police 입력
    ll P; cin >> P;
    vector<ll> Pstat(P, 0);
    vector<vector<pll>> Ploc(P);
    for (i=0; i<P; i++) {
        ll num; cin >> num;
        for (j=0; j<num; j++) {
            pair<ll,ll> tmp;
            cin >> input; tmp.first = stoll(input.substr(1)) - 1;
            cin >> input; tmp.second = stoll(input.substr(0, input.size()-1)) - 1;
            Ploc[i].emplace_back(tmp);
        }
        for (j=(ll)Ploc[i].size()-2; j>=1; j--)
            Ploc[i].emplace_back(Ploc[i][j]);
    }

    // Police 경비 주기 구하고 각 시점 별 맵 만들기
    ll T = 1, nr, nc;
    function<ll(ll,ll)> gcd = [&gcd](ll x, ll y) {return y ? gcd(y, x%y) : x;};
    function<ll(ll,ll)> lcm = [&gcd](ll x, ll y) {return x*(y/gcd(x,y));};
    for (i=0; i<P; i++) T = lcm(T, (ll)Ploc[i].size());
    vector<vector<vector<char>>> Mt(T, M);
    for (i=0; i<T; i++) {
        for (j=0; j<P; j++) {
            auto& [r,c] = Ploc[j][Pstat[j]];
            Mt[i][r][c] = 'X';
            nr=r-1,nc=c; while (nr>=0&&Mt[i][nr][nc]!='#') Mt[i][nr--][nc] = 'X';
            nr=r+1,nc=c; while (nr<R &&Mt[i][nr][nc]!='#') Mt[i][nr++][nc] = 'X';
            nr=r,nc=c-1; while (nc>=0&&Mt[i][nr][nc]!='#') Mt[i][nr][nc--] = 'X';
            nr=r,nc=c+1; while (nc<C &&Mt[i][nr][nc]!='#') Mt[i][nr][nc++] = 'X';
            Pstat[j] = (Pstat[j] + 1) % (ll)Ploc[j].size();
        }
    }

    // bfs 탐색하기
    queue<pll> q;
    vector<vector<vector<bool>>> visited(T, vector<vector<bool>>(R, vector<bool>(C, false)));
    q.emplace(sr, sc);
    visited[0][sr][sc] = true;
    ll ans = 0, t = 0, num;
    ll d[2][4] =  {{-1, 0, 1, 0},{0, 1, 0, -1}};
    while (!q.empty()) {
        num = (ll)q.size();
        ans++; t = (t + 1) %T;
        for (i=0; i<num; i++) {
            auto& [r,c] = q.front();
            if (r==tr && c==tc) {
                cout << ans;
                return;
            }
            if (Mt[t][r][c] == '.' && !visited[t][r][c]) {
                q.emplace(r, c);
                visited[t][r][c] = true;
            }
            for (j=0; j<4; j++) {
                nr = r + d[0][j], nc = c + d[1][j];
                if (nr==tr && nc==tc) {
                    cout << ans;
                    return;
                }
                if (nr<0 || nc<0 || nr==R || nc==C || Mt[t][nr][nc]!='.' || visited[t][nr][nc])
                    continue;
                q.emplace(nr, nc);
                visited[t][nr][nc] = true;
            }
            q.pop();
        }
    }
    cout << "IMPOSSIBLE";
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase<=t; testcase++) {
        solve(testcase);
    }
    return 0;
}