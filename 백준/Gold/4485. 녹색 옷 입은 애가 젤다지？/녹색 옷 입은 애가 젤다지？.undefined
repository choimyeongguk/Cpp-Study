#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

bool solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    if (!N) return false;
    vvl M(N, vl(N));
    for (auto& e : M)
        for (auto& v : e)
            cin >> v;

    ll nr, nc, nxtCost;
    vvl visit(N, vl(N, false));
    vvl d = {{-1, 0, 1, 0},{0, 1, 0, -1}};
    using Node = pair<ll,pll>;
    priority_queue<Node,vector<Node>,greater<>> pq;
    pq.emplace(M[0][0], pll{0, 0}); visit[0][0] = true;
    while (true) {
        auto [cost,loc] = pq.top(); pq.pop();
        auto& [r,c] = loc;
        for (i=0; i<4; i++) {
            nr = r + d[0][i];
            nc = c + d[1][i];
            if (nr<0 || nc<0 || nr==N || nc==N || visit[nr][nc]) continue;
            nxtCost = cost + M[nr][nc];
            if (nr==N-1 && nc==N-1) {
                cout << "Problem " << testcase << ": " << nxtCost << "\n";
                return true;
            }
            visit[nr][nc] = true;
            pq.emplace(nxtCost, pll{nr, nc});
        }
    }
}

int main() {
    setup();
    preprocess();
    ll testcase = 1;
    while (solve(testcase++));
    // ll t = 1;
    // cin >> t;
    // for (ll testcase = 1; testcase <= t; testcase++){
        // solve(testcase);
    // }
    return 0;
}