#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
template<typename T> using ordered_set
    = tree<T, null_type, less<>, rb_tree_tag,
        tree_order_statistics_node_update>;
template<typename T> using ordered_multiset
    = tree<T, null_type, less_equal<>, rb_tree_tag,
        tree_order_statistics_node_update>;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct simulation {
    ll N, maxVal = 0;
    vector<vector<ll>> board;
    void init() {
        cin >> N;
        board.resize(N, vector<ll>(N));
        for (auto& e : board) for (auto& v : e) cin >> v;
    }
    void run() {
        if (N==1) cout << board[0][0];
        else {
            dfs(0, board);
            cout << maxVal;
        }
    }
    void dfs(ll depth, const vector<vector<ll>>& board) {
        if (depth==5) {
            maxVal = max(maxVal, getMax(board));
            return;
        }
        vector<vector<ll>> new_board;
        for (ll i=0; i<4; i++) {
            new_board = tilt(board, i);
            dfs(depth+1, new_board);
        }
    }
    ll getMax(const vector<vector<ll>>& board) {
        ll ret = 0;
        for (auto& e : board)
            for (auto& v : e)
                ret = max(ret, v);
        return ret;
    }
    vector<vector<ll>> tilt(const vector<vector<ll>>& board, ll d) {
        vector<vector<ll>> ret(N, vector<ll>(N, 0));
        vector<vector<bool>> combined(N, vector<bool>(N, false));
        ll sr, er, sc, ec, dr, dc, r, c, nr, nc, nnr, nnc;
        ll dd[2][4] = {{-1, 0, 1, 0},{0, 1, 0, -1}};
        switch (d) {
            case 0: sr = sc = 0, er = ec = N-1, dr = 1, dc = 1; break;   // 위쪽
            case 1: sr = ec = 0, er = sc = N-1, dr = 1, dc = -1; break;   // 오른쪽
            case 2: sr = ec = N-1, er = sc = 0, dr = -1, dc = 1; break;    // 아래쪽
            case 3: sr = sc = 0, er = ec = N-1, dr = 1, dc = 1; break;    // 왼쪽
        }
        for (r=sr; er ? r<=er : r>=er; r+=dr) {
            for (c=sc; ec ? c<=ec : c>=ec; c+=dc) {
                if (!board[r][c]) continue;
                nr = r, nc = c;
                while (true) {
                    nnr = nr+dd[0][d];
                    nnc = nc+dd[1][d];
                    if (nnr<0 || nnc<0 || nnr==N || nnc==N) {
                        ret[nr][nc] = board[r][c];
                        break;
                    }
                    if (!ret[nnr][nnc])
                        nr = nnr, nc = nnc;
                    else {
                        if (ret[nnr][nnc]==board[r][c] && !combined[nnr][nnc]) {
                            ret[nnr][nnc] <<= 1;
                            combined[nnr][nnc] = true;
                        } else ret[nr][nc] = board[r][c];
                        break;
                    }
                }
            }
        }
        return ret;
    }
};

void solve(ll testcase){
    ll i, j, k;
    simulation sim;
    sim.init();
    sim.run();
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}