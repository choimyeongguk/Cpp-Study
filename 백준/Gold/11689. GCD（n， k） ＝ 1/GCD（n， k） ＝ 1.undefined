#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
template<typename T> using ordered_set
    = tree<T, null_type, less<>, rb_tree_tag,
        tree_order_statistics_node_update>;
template<typename T> using ordered_multiset
    = tree<T, null_type, less_equal<>, rb_tree_tag,
        tree_order_statistics_node_update>;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

ll phi(ll n) {
    ll result = n;
    for (ll p=2; p*p<=n; ++p) {
        if (n%p == 0) { // p가 소수일때만 만족
            while (n%p == 0) n /= p;
            result = result / p * (p - 1);
            // n = p1^a1 * p2^a2 * ... * pk^ak
            // phi(n) = phi(p1^a1) * phi(p2^a2) * ... * phi(pk^ak)
            //        = (p1^a1 - p1^(a1-1)) * ... * (pk^ak - pk^(ak-1))
            //        = p1^a1(1-1/p1) * p2^a2(1-1/p2) * ... * pk^ak(1-1/pk)
            //        = n * (1-1/p1) * (1-1/p2) * ... * (1-1/pk)
        }
    }
    if (n > 1) {
        // n = p1^a1 * p2^a2 * ... * pk^ak
        // p1,...,pk 는 두 개 이상 있다면 반드시 sqrt(n) 보다 아래에 있어야함
        // sqrt(n) 보다 큰 데 두 개 있다 -> 곱하면 n보다 커짐 : 모순!
        // 따라서 sqrt(n) 까지 탐색하고 남은 수는 소수 하나
        result = result / n * (n - 1);
    }
    return result;
}

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    cout << phi(N);
}



int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}