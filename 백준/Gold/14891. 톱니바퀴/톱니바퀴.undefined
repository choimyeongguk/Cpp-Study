#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct Gear {
    string stat; ll left, right;
    Gear() {}
    Gear(string& str): stat(str), left(str[6]), right(str[2]) {}
    void rotate(ll dir) {
        if (!dir) return;
        stat = dir==1 ? stat[7] + stat.substr(0, 7)
                      : stat.substr(1, 7) + stat[0];
        left = stat[6], right = stat[2];
    }
    ll point() {
        return stat[0]=='1';
    }
    bool operator==(const Gear &o) const {
        return right == o.left;
    }
};

void solve(ll testcase){
    ll i, j, k;
    vector<Gear> gear(4);
    string stat;
    for (i=0; i<4; i++) {
        cin >> stat;
        gear[i] = Gear(stat);
    }
    ll Q; cin >> Q;
    ll num, dir;
    vl rotate(4);
    while (Q--) {
        cin >> num >> dir;
        fill(rotate.begin(), rotate.end(), 0);
        rotate[--num] = dir;

        ll l = num-1;
        while (l>=0 && gear[l] != gear[l+1]) {
            rotate[l] = -rotate[l+1];
            l--;
        }
        ll r = num+1;
        while (r<4 && gear[r-1] != gear[r]) {
            rotate[r] = -rotate[r-1];
            r++;
        }

        for (i=0; i<4; i++) {
            gear[i].rotate(rotate[i]);
        }
    }
    ll ans = 0;
    for (i=0; i<4; i++)
        ans += gear[i].point() * (1LL<<i);
    cout << ans;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}