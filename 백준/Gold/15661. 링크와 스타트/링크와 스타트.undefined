#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef pair<ll, ll> pll;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

void solve(ll testcase){
    ll i, j, k, l;
    ll n;
    cin >> n;
    vector<vector<ll>> m(n, vector<ll>(n));
    for (auto& r : m) for (auto& c : r) cin >> c;
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            m[i][j] += m[j][i];
        }
    }
    ll ans = 0x3f3f3f3f;
    ll linkN, startN;
    vector<ll> link;
    vector<ll> start;
    vector<ll> bs(n, 0);

    for (i = 1; i <= n / 2; i++) {
        bs.clear();
        bs.resize(n, 0);
        fill(bs.begin(), bs.begin() + i, 1);
        do {
            linkN = 0, startN = 0;
            link.clear();
            start.clear();
            for (k = 0; k < n; k++) {
                if (bs[k])
                    link.push_back(k);
                else
                    start.push_back(k);
            }
            for (k = 0; k < link.size(); k++) {
                for (l = k + 1; l < link.size(); l++) {
                    linkN += m[link[k]][link[l]];
                }
            }
            for (k = 0; k < start.size(); k++) {
                for (l = k + 1; l < start.size(); l++) {
                    startN += m[start[k]][start[l]];
                }
            }
            // cout << linkN << " " << startN << "\n";
            ans = min(ans, abs(linkN - startN));
        } while (prev_permutation(bs.begin(), bs.end()));
    }
    cout << ans;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
//    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}