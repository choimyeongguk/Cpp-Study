#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216");
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

vector<set<ll>> dijk(ll n, ll s, vector<vector<pll>> &adj) {
    const ll INF = 1e18;
    vl dis(n, INF);
    vector<set<ll>> prev(n);
    vector<bool> visit(n, false);
    priority_queue<pll, vector<pll>, greater<pll>> q;
    dis[s] = 0;
    q.push({dis[s], s});
    while (q.size()) {
        while (q.size() && visit[q.top().second]) q.pop();
        if (q.empty()) break;
        ll next = q.top().second; q.pop();
        visit[next]=1;
        for (ll i=0;i<adj[next].size();i++) {
            if (visit[adj[next][i].first]) continue;
            if (dis[adj[next][i].first]>dis[next]+adj[next][i].second) {
                dis[adj[next][i].first]=dis[next]+adj[next][i].second;
                prev[adj[next][i].first].clear();
                q.push({dis[adj[next][i].first], adj[next][i].first});
            }
            if (dis[adj[next][i].first]==dis[next]+adj[next][i].second) {
                prev[adj[next][i].first].insert(next);
            }
        }
    }
    return prev;
}

void solve(ll test) {
    ll i, j, k;
    ll ans=0;
    ll n, m, a, b; cin>>n>>m>>a>>b;
    --a, --b;
    vector<vector<pll>> adj(n);
    while (m--) {
        ll u, v, w; cin>>u>>v>>w;
        --u, --v;
        adj[u].push_back({v, w});
        adj[v].push_back({u, w});
        ans+=w;
    }
    vector<set<ll>> prev = dijk(n, a, adj);
    // for (auto &x: prev) {
    //     for (auto y: x) cout<<y<<' ';
    //     cout<<endl;
    // }
    vl vis(n);
    function<ll(ll)> f = [&vis, &prev, &adj, &b, &f](ll cur) -> ll {
        ll ret=0;
        for (ll p: prev[cur]) {
            for (pll x: adj[cur]) {
                if (x.first==p) {
                    ret += x.second;
                    break;
                }
            }
            if (!vis[p]) ret += f(p);
            vis[p]=1;
        }
        return ret;
    };
    // cout<<endl;
    ll fb = f(b);
    // cout<<fb<<endl;
    cout<<ans-fb<<'\n';
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test = 1; test<=t; test++) {
        solve(test);
    }
    return 0;
}