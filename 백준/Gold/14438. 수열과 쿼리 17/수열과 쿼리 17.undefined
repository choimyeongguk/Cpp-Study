#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef pair<ll, ll> pll;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct segTree {
    ll n;
    vector<ll> data;
    vector<ll> tree;
    segTree(ll _n): n(_n), data(n), tree(n<<2) {}

    void segInit(ll i, ll s, ll e) {
        if (s == e) {
            tree[i] = data[s];
            return;
        }
        ll m = (s+e)>>1;
        segInit(i<<1, s, m);
        segInit(i<<1|1, m+1, e);
        tree[i] = tree[i<<1]<tree[i<<1|1] ? tree[i<<1] : tree[i<<1|1];
    }
    void init(const vector<ll>& arr) {
        data = arr;
        segInit(1, 0, n-1);
    }

    void segUpdate(ll i, ll s, ll e, ll pos, ll val) {
        if (pos<s || pos>e) return;
        if (s==e) {
            tree[i] = val;
            return;
        }
        ll m = (s+e)>>1;
        segUpdate(i<<1, s, m, pos, val);
        segUpdate(i<<1|1, m+1, e, pos, val);
        tree[i] = tree[i<<1]<tree[i<<1|1] ? tree[i<<1] : tree[i<<1|1];
    }
    void update(ll pos, ll val) {
        segUpdate(1, 0, n-1, pos, val);
    }

    ll segQuery(ll i, ll s, ll e, ll l, ll r) {
        if (s>r || e<l) return 1e10;
        if (l<=s && e<=r) return tree[i];
        ll m = (s+e)>>1;
        ll t1 = segQuery(i<<1, s, m, l, r);
        ll t2 = segQuery(i<<1|1, m+1, e, l, r);
        return t1<t2 ? t1 : t2;
    }
    ll query(ll l, ll r) {
        return segQuery(1, 0, n-1, l, r);
    }
};

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    vector<ll> arr(N);
    for (auto& e : arr) cin >> e;
    segTree tree(N);
    tree.init(arr);

    ll M; cin >> M;
    ll op, a, b;
    for (i = 0; i < M; i++) {
        cin >> op >> a >> b;
        switch (op) {
            case 1:
                tree.update(a-1, b);
                break;
            case 2:
                cout << tree.query(a-1, b-1) << "\n";
                break;
        }
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
//    cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}