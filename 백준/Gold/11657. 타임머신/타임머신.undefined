#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

//Usage: auto [negative cycle, distance] = bellman(V, start, adj);
//O(VE)
const ll INF=1e18;
pair<bool,vl> bellman(ll n, ll s, vector<vector<pll>>& adj){
    bool cycle=0;
    vector<ll>dis(n,INF);
    dis[s]=0;
    for (ll i=0;i<n;++i)
        for (ll j=0;j<n;++j)
            for (ll k=0;k<adj[j].size();++k){
                ll next=adj[j][k].first;
                ll cost=adj[j][k].second;
                if (dis[j]!=INF && dis[next]>dis[j]+cost) {
                    dis[next]=dis[j]+cost;
                    if (i==n-1) cycle=1;
                }
            }
    return {!cycle, dis};
}

void solve(ll testcase){
    ll i, j, k;
    ll V, E; cin >> V >> E;
    vector<vector<pll>> G(V);
    ll a, b, c;
    for (i=0; i<E; i++) {
        cin >> a >> b >> c;
        G[a-1].emplace_back(b-1, c);
    }
    auto [cycle,dist] = bellman(V, 0, G);
    if (!cycle) {
        cout << -1;
        return;
    }
    for (i=1; i<V; i++) {
        cout << (dist[i]==INF ? -1 : dist[i]) << "\n";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}