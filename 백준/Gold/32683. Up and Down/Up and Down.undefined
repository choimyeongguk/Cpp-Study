#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

struct SEG {
    ll n;
    vl seg;
    SEG(ll n) : n(n), seg(n<<2) {}
    ll range_sum(ll node, ll l, ll r, ll s, ll e) {
        if (r<s || e<l) return 0;
        if (s<=l && r<=e) return seg[node];
        ll m=(l+r)>>1;
        return max(range_sum(node<<1,l,m,s,e),range_sum(node<<1|1,m+1,r,s,e));
    }
    void point_update(ll node, ll l, ll r, ll tar, ll val) {
        if (r<tar || tar<l) return;
        if (l==r) {
            seg[node]=val;
            return;
        }
        ll m=(l+r)>>1;
        point_update(node<<1, l,m,tar,val);
        point_update(node<<1|1, m+1,r,tar,val);
        seg[node]=max(seg[node<<1], seg[node<<1|1]);
    }
    void update(ll tar, ll val) {point_update(1,0,n-1,tar,val);}
    ll query(ll s, ll e) {return range_sum(1,0,n-1,s,e);}
};

vl lis(vector<pll> &arr) {
    ll n=arr.size();
    vl ret(n);
    SEG seg(n);
    for (auto [val, idx] : arr) {
        ret[idx] = seg.query(0, idx)+1;
        seg.update(idx, ret[idx]);
    }
    return ret;
}

void solve() {
    ll i, j, k;
    ll n; cin>>n;
    vector<pll>  arr(n);
    for (i=0;i<n;i++) cin>>arr[i].first, arr[i].second=i;
    sort(arr.begin(), arr.end(), [](const pll &a, const pll &b) {
        if (a.first==b.first) return a.second>b.second;
        return a.first<b.first;
    });
    vl left = lis(arr);
    // for (auto x: left) cout<<x<<' '; cout<<endl;
    for (i=0;i<n;i++) arr[i].second=n-arr[i].second-1;
    sort(arr.begin(), arr.end(), [](const pll &a, const pll &b) {
        if (a.first==b.first) return a.second>b.second;
        return a.first<b.first;
    });
    vl right = lis(arr);
    reverse(right.begin(), right.end());
    // for (auto x: right) cout<<x<<' '; cout<<endl;

    ll ans=0;
    for (i=0;i<n;i++) arr[i].second=n-arr[i].second-1;
    sort(arr.begin(), arr.end());
    SEG seg(n);
    for (auto [val, idx] : arr) {
        ll t = seg.query(idx, n-1);
        if (left[idx]!=1 && t!=0) {
            ans=max(ans, t+left[idx]);
        }
        seg.update(idx, right[idx]);
    }
    cout<<ans<<'\n';
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    cin >> t;
    for (ll test=1; test<=t; test++) {
        solve();
    }
    return 0;
}