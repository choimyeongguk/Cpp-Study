#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
template<typename T> using ordered_set
    = tree<T, null_type, less<>, rb_tree_tag,
        tree_order_statistics_node_update>;
template<typename T> using ordered_multiset
    = tree<T, null_type, less_equal<>, rb_tree_tag,
        tree_order_statistics_node_update>;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

void floyd_warshall(vector<vector<ll>>& G, vector<vector<vector<ll>>>& Path) {
    ll n = G.size();
    for (ll m=0; m<n; m++)
        for (ll s=0; s<n; s++)
            for (ll e=0; e<n; e++) {
                if (G[s][e]>G[s][m]+G[m][e]) {
                    G[s][e] = G[s][m]+G[m][e];
                    vector<ll> tmp = Path[s][m];
                    tmp.insert(tmp.end(), Path[m][e].begin()+1, Path[m][e].end());
                    Path[s][e] = tmp;
                }
            }
}

void solve(ll testcase){
    ll i, j, k;
    ll n, m; cin >> n >> m;
    vector<vector<ll>> G(n, vector<ll>(n, 1e10));
    vector<vector<vector<ll>>> Path(n, vector<vector<ll>>(n));
    for (i=0; i<n; i++) {
        G[i][i] = 0;
    }
    ll a, b, c;
    while (m--) {
        cin >> a >> b >> c;
        a--, b--;
        G[a][b] = min(G[a][b], c);
        Path[a][b] = {a, b};
    }
    floyd_warshall(G, Path);
    for (auto& e : G) {
        for (auto& v : e) {
            if (v==1e10) cout << "0 ";
            else cout << v << " ";
        }
        cout << "\n";
    }
    for (i=0; i<n; i++) {
        for (j=0; j<n; j++) {
            cout << Path[i][j].size() << " ";
            for (auto& e : Path[i][j]) cout << e+1 << " ";
            cout << "\n";
        }
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}