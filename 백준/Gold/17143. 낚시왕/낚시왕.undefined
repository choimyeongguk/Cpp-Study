#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
template<typename T> using ordered_set
    = tree<T, null_type, less<>, rb_tree_tag,
        tree_order_statistics_node_update>;
template<typename T> using ordered_multiset
    = tree<T, null_type, less_equal<>, rb_tree_tag,
        tree_order_statistics_node_update>;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct Simulate {
    struct Shark {
        ll r, c, s, d, z = 0;
        bool moved = false, live = false;
    };
    ll R, C, M;
    ll loc = 0, result = 0;
    ll d[2][4] = {{-1, 1, 0, 0}, {0, 0, 1, -1}};
    vector<vector<ll>> board;
    vector<Shark> shark;
    Simulate() {
        cin >> R >> C >> M;
        board.assign(R, vector<ll>(C, 0));
        shark.assign(M+1, Shark());
        ll r, c, s, d, z;
        for (ll i=1; i<=M; i++) {
            cin >> r >> c >> s >> d >> z;
            s %= ((--d<=1 ? R:C)<<1)-2;
            board[--r][--c] = i;
            shark[i] = {r, c, s, d, z, false, true};
        }
    }
    void run() {
        for (;loc<C; loc++) {
            catchFish();
            moveShark();
        }
        cout << result;
    }
    void catchFish() {
        for (ll r=0; r<R; r++) {
            if (board[r][loc]) {
                result += shark[board[r][loc]].z;
                shark[board[r][loc]].live = false;
                board[r][loc] = 0;
                break;
            }
        }
    }
    void moveShark() {
        for (ll i=1; i<=M; i++) {
            if (!shark[i].live) continue;
            auto [nr, nc] = getNxtLoc(shark[i]);
            if (board[shark[i].r][shark[i].c]==i)
                board[shark[i].r][shark[i].c] = 0;
            shark[i].r = nr, shark[i].c = nc;
            shark[i].moved = true;
            if (shark[board[nr][nc]].moved) {   // 다른 상어와 조우
                if (shark[board[nr][nc]].z>shark[i].z) {
                    shark[i].live = false;
                } else {
                    shark[board[nr][nc]].live = false;
                    board[nr][nc] = i;
                }
            } else board[nr][nc] = i;
        }
        for (ll i=1; i<=M; i++) {
            shark[i].moved = false;
        }
    }
    pll getNxtLoc(Shark& shark) {
        ll nr = shark.r, nc = shark.c, s = shark.s;
        if (shark.d<=1) {   // 위아래
            nr += shark.d==0 ? -s : s;
            while (nr<0 || nr>=R) {
                nr = nr<0 ? -nr : ((R-1)<<1)-nr;
                shark.d ^= 1;
            }
        } else {            // 오왼
            nc += shark.d==2 ? s : -s;
            while (nc<0 || nc>=C) {
                nc = nc<0 ? -nc : ((C-1)<<1)-nc;
                shark.d ^= 1;
            }
        }
        return {nr, nc};
    }
};

void solve(ll testcase){
    ll i, j, k;
    Simulate sim;
    sim.run();
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}