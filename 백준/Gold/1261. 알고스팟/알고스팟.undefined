#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

using Node = pair<ll,pll>;
void solve(ll testcase){
    ll i, j, k;
    ll R, C; cin >> C >> R;
    vector<string> M(R); for (auto& e : M) cin >> e;

    vvl d = {{-1, 0, 1, 0}, {0, 1, 0, -1}};
    vvl visit(R, vl(C, 1e10));
    priority_queue<Node,vector<Node>,greater<>> pq;
    visit[0][0] = M[0][0]=='1'; pq.emplace(M[0][0]=='1', pll{0, 0});
    ll nr, nc, tmp;
    while (!pq.empty()) {
        auto [numBreak,loc] = pq.top(); pq.pop();
        auto& [r,c] = loc;
        if (visit[r][c] != numBreak) continue;
        if (r==R-1 && c==C-1) {
            cout << numBreak;
            return;
        }
        for (i=0; i<4; i++) {
            nr = r + d[0][i];
            nc = c + d[1][i];
            if (nr<0 || nc<0 || nr==R || nc==C) continue;
            tmp = numBreak + (M[nr][nc]=='1');
            if (visit[nr][nc] > tmp) {
                visit[nr][nc] = tmp;
                pq.emplace(tmp, pll{nr, nc});
            }
        }
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}