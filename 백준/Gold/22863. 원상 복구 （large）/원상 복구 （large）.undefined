#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef pair<ll, ll> pll;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

void solve(ll testcase){
    ll i, j, k;

    ll N, K;
    cin >> N >> K;
    vector<ll> S(N + 1);
    for (i = 1; i <= N; i++) cin >> S[i];
    vector<ll> D(N + 1);
    for (i = 1; i <= N; i++) cin >> D[i];
    vector<ll> arr(N + 1);
    for (i = 1; i <= N; i++) arr[D[i]] = i;

    ll start, cur, cnt, cycleCnt = 0;
    vector<vector<ll>> cycle;
    vector<ll> cycleNum(N + 1);
    vector<bool> visited(N + 1, false);
    for (i = 1; i <= N; i++) {
        if (visited[i]) continue;
        cycle.push_back(vector<ll>());;
        cur = start = i;
        cnt = 0;
        do {
            visited[cur] = true;
            cycle[cycleCnt].push_back(cur);
            cnt++;
            cur = arr[cur];
        } while (cur != start);
        for (auto& e : cycle[cycleCnt]) {
            cycleNum[e] = cycleCnt;
        }
        cycleCnt++;
    }

    // cout << "cycle : " << "\n";
    // for (auto&e  : cycle) {
    //     for (auto&v : e) cout << v << " ";
    //     cout << "\n";
    // }
    //
    // cout << "S : " << "\n";
    // for (auto& e : S) cout << e << " ";
    // cout << "\n";

    vector<ll> idx(N + 1);
    for (auto& e : cycle) {
        for (i = 0; i < e.size(); i++) {
            idx[e[i]] = e[(i + K) % e.size()];
        }
    }
    for (i = 1; i <= N; i++) cout << S[idx[i]] << " ";

    // ll idx;
    // for (i = 1; i <= N; i++) {
    //     idx = find(all(cycle[cycleNum[i]]), i) - cycle[cycleNum[i]].begin();
    //     idx = (idx + K) % cycle[cycleNum[i]].size();
    //     cout << S[cycle[cycleNum[i]][idx]] << ' ';
    // }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}