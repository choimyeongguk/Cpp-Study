#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

struct Fraction {
    ll ja, mo;
    Fraction(ll j, ll m) : mo(m), ja(j) {
        simplify();
    }
    void simplify() {
        ll g = gcd(mo, ja);
        mo /= g;
        ja /= g;
    }
    Fraction operator-(Fraction rhs) {
        Fraction ret(ja*rhs.mo - mo*rhs.ja, mo*rhs.mo);
        ret.simplify();
        return ret;
    }
    Fraction operator+(Fraction rhs) {
        Fraction ret(ja*rhs.mo + mo*rhs.ja, mo*rhs.mo);
        ret.simplify();
        return ret;
    }
};


void solve(ll test) {
    ll a,b;
    cin>>a>>b;
    Fraction f(a,b);
    while (1) {
        ll x=f.mo/f.ja + (f.mo%f.ja!=0);
        Fraction newX(1,x);
        f=f-newX;
        if (f.ja==0) {
            f=f+newX;
            break;
        }
    }
    cout<<f.mo<<'\n';
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    cin >> t;
    for (ll test=1; test<=t; test++) {
        solve(test);
    }
    return 0;
}