#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

void solve(ll testcase){
    ll i, j, k;
    ll R, C; cin >> R >> C;
    vector<string> M(R); for (auto& e : M) cin >> e;
    queue<pll> jihoon, fire;
    for (i=0; i<R; i++) {
        for (j=0; j<C; j++) {
            switch (M[i][j]) {
                case 'J': jihoon.emplace(i, j); break;
                case 'F': fire.emplace(i, j); break;
            }
        }
    }
    ll time = 0, nr, nc;
    vvl d = {{-1, 0, 1, 0},{0, 1, 0, -1}};
    while (!jihoon.empty()) {
        // 지훈 이동
        time++;
        ll iter = jihoon.size();
        for (i=0; i<iter; i++) {
            auto [r,c] = jihoon.front(); jihoon.pop();
            if (M[r][c]=='F') continue;
            if (r==0 || c==0 || r==R-1 || c==C-1) {
                cout << time;
                return;
            }
            for (j=0; j<4; j++) {
                nr = r + d[0][j];
                nc = c + d[1][j];
                if (M[nr][nc] != '.') continue;
                M[nr][nc] = 'J';
                jihoon.emplace(nr, nc);
            }
        }
        // 불 이동
        iter = fire.size();
        for (i=0; i<iter; i++) {
            auto [r,c] = fire.front(); fire.pop();
            for (j=0; j<4; j++) {
                nr = r + d[0][j];
                nc = c + d[1][j];
                if (nr<0 || nc<0 || nr==R || nc==C || M[nr][nc]=='#' || M[nr][nc]=='F') continue;
                M[nr][nc] = 'F';
                fire.emplace(nr, nc);
            }
        }
    }
    cout << "IMPOSSIBLE";
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}