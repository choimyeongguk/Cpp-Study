#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

struct SegTree {
    ll n; vl tree;
    SegTree(): n(20'001), tree(n<<2) {}
    void update(ll pos) { update(1, 0, n-1, pos); }
    void update(ll i, ll s, ll e, ll pos) {
        tree[i]++;
        if (s==e) return;
        ll m = (s+e)>>1;
        pos<=m ? update(i<<1, s, m, pos) : update(i<<1|1, m+1, e, pos);
    }
    ll query(ll nth) { return query(1, 0, n-1, nth); }
    ll query(ll i, ll s, ll e, ll nth) {
        if (s==e) return s;
        ll m = (s+e)>>1;
        return nth <= tree[i<<1] ?
            query(i<<1, s, m, nth) : query(i<<1|1, m+1, e, nth-tree[i<<1]);
    }
};

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    ll num;
    SegTree seg;
    for (i=1; i<=N; i++) {
        cin >> num;
        seg.update(num+10000);
        cout << seg.query((i+1)/2)-10000 << "\n";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}