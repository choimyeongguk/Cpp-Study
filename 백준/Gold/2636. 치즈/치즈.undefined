#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using ull = unsigned long long;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}

void solve(ll testcase){
    ll i, j, k;
    ll R, C; cin >> R >> C;
    vvl M(R, vl(C));
    ll numCheese = 0;
    for (auto& e : M)
        for (auto& v : e) {
            cin >> v;
            if (v == 1)
                numCheese++;
        }

    // 외부 공기 -1로 초기화 하고 접촉한 치즈 찾기
    vvl d = {{-1, 0, 1, 0},{0, 1, 0, -1}};
    set<pll> cheese;
    function<void(ll,ll)> find_air = [&](ll r, ll c) {
        M[r][c] = -1;
        ll nr, nc;
        for (ll ii=0; ii<4; ii++) {
            nr = r + d[0][ii];
            nc = c + d[1][ii];
            if (nr<0 || nc<0 || nr==R || nc==C) continue;
            if (M[nr][nc] == 0)
                find_air(nr, nc);
            else if (M[nr][nc] == 1 && !cheese.contains({nr,nc}))
                cheese.emplace(nr, nc);
        }
    };
    find_air(0, 0);

    ll time = 0, ans = 0;
    while (numCheese > 0) {
        time++;
        ans = numCheese;

        for (auto& e : cheese) {
            auto& [r,c] = e;
            M[r][c] = 0;
            numCheese--;
        }
        set<pll> tmp = move(cheese);
        for (auto& e : tmp) {
            auto& [r,c] = e;
            find_air(r, c);
        }
    }
    cout << time << "\n" << ans;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}