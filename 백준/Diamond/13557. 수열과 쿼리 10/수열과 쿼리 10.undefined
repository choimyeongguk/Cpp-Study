#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
typedef unsigned long long ull;
typedef __float128 LD;
typedef __int128_t LL;
typedef __uint128_t ULL;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef vector<ll> vl;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
template<typename T> using ordered_set
    = tree<T, null_type, less<>, rb_tree_tag,
        tree_order_statistics_node_update>;
template<typename T> using ordered_multiset
    = tree<T, null_type, less_equal<>, rb_tree_tag,
        tree_order_statistics_node_update>;
#define pb(x) push_back(x)
#define all(x) (x).begin(), (x).end()
#define rep(i,a,b) for (auto i = (a); i < (b); i++)
#define each(x, a) for (auto& x: a)

#define debug if constexpr (!ndebug) cout << "[DEBUG] "
#define debugv(x) if constexpr (!ndebug) cout << "[DEBUG] " << #x << " == " << x << '\n';
#define debugc(c) if constexpr (!ndebug) { cout << "[DEBUG] "<< #c << ": "; for (const auto& elem : c) cout << elem << ", "; cout << '\n'; }

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

ll gcd(ll a, ll b){return b?gcd(b,a%b):a;}
ll lcm(ll a, ll b){if(a&&b)return a*(b/gcd(a,b)); return a+b;}
ll POW(ll a, ll b, ll rem){ll p=1;a%=rem;for(;b;b>>=1,a=(a*a)% rem)if(b&1)p=(p*a)%rem;return p;}
pll extended_gcd(ll a, ll b){if(b == 0)return {1, 0};auto t = extended_gcd(b, a % b);return {t.second, t.first - t.second * (a / b)};}
ll modinverse(ll a, ll m){return (extended_gcd(a, m).first % m + m) % m;}

void setup() {
    if(!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;

}
struct Node {
    ll ans, sum, l, r;
};
// 구간합의 최댓값
struct SegTree {
    ll n;
    vector<ll>& data;
    vector<Node> tree;
    SegTree(vector<ll>& arr): n(arr.size()), data(arr), tree(n<<2) {
        segInit(1, 0, n-1);
    }
    void segInit(ll i, ll s, ll e) {
        if (s==e) {
            tree[i] = {data[s], data[s], data[s], data[s]};
            return;
        }
        ll m = (s+e)>>1;
        segInit(i<<1, s, m);
        segInit(i<<1|1, m+1, e);
        tree[i] = {
            max({tree[i<<1].ans, tree[i<<1|1].ans, tree[i<<1].r+tree[i<<1|1].l}),
            tree[i<<1].sum+tree[i<<1|1].sum,
            max(tree[i<<1].l, tree[i<<1].sum+tree[i<<1|1].l),
            max(tree[i<<1|1].r, tree[i<<1|1].sum+tree[i<<1].r)
        };
    }
    Node segQuery(ll i, ll s, ll e, ll l, ll r) {
        if (s>r || e<l) return Node(-1e18, 0, -1e18, -1e18);
        if (l<=s && e<=r) return tree[i];
        ll m = (s+e)>>1;
        Node lch = segQuery(i<<1, s, m, l, r);
        Node rch = segQuery(i<<1|1, m+1, e, l, r);
        return Node(
            max({lch.ans, rch.ans, lch.r+rch.l}),
            lch.sum+rch.sum,
            max(lch.l, lch.sum+rch.l),
            max(rch.r, rch.sum+lch.r)
        );
    }
    Node query(ll l, ll r) {
        if (l>r) return {0, 0, 0, 0};
        return segQuery(1, 0, n-1, l, r);
    };
};

void solve(ll testcase){
    ll i, j, k;
    ll N; cin >> N;
    vector<ll> arr(N);
    for (auto&e:arr) cin >> e;
    SegTree tree(arr);

    ll Q; cin >> Q;
    ll x1, y1, x2, y2, ans, t1, t2, t3;
    Node query;
    while (Q--) {
        cin >> x1 >> y1 >> x2 >> y2;
        --x1, --y1, --x2, --y2;
        // x1<=y1, x2<=y2, x1<=x2, y1<=y2;
        if (y1<x2) {    // 1구간과 2구간이 겹치지 않는 경우
            ans = tree.query(x1, y1).r+tree.query(y1+1, x2-1).sum+tree.query(x2, y2).l;
        } else if (x1==x2) {    // 2구간이 1구간을 완전히 포함하는 경우
            query = tree.query(x1, y1); 
            t1 = query.ans;
            t2 = query.r+tree.query(y1+1, y2).l;
            ans = max(t1, t2);
        } else if (y1==y2) {    // 1구간이 2구간을 완전히 포함하는 경우
            query = tree.query(x2, y2);
            t1 = query.ans;
            t2 = tree.query(x1, x2-1).r+query.l;
            ans = max(t1, t2);
        } else if (x2<=y1) {    // 2구간이 1구간 오른쪽에 겹치는 경우
            query = tree.query(x2, y1);
            t1 = tree.query(x1, x2-1).r+tree.query(x2, y2).l;
            t2 = query.ans;
            t3 = query.r+tree.query(y1+1, y2).l;
            ans = max({t1, t2, t3});
        }
        cout << ans << "\n";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++){
        solve(testcase);
    }
    return 0;
}