#include<bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll, ll>;
using ld = long double;
using pld = pair<ld, ld>;
using ull = unsigned long long;
using tlll = tuple<ll, ll, ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    } else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

// Usage : DINIC flow(#node)
//         flow.add_edge(start, end, capacity)
//         ans = flow.solve(source, sink)
// O(V^2*E)
struct DINIC {
    struct Edge {
        ll nxt, rev, res;
    };

    ll n, pathLimit;
    vl level, start;
    vector<vector<Edge> > graph;

    DINIC(ll _n, ll _pathLimit = LLONG_MAX)
        : n(_n), pathLimit(_pathLimit), graph(n), level(n), start(n) {
    }

    void add_edge(ll s, ll e, ll cap, ll rev_cap = 0) {
        graph[s].push_back({e, (ll) graph[e].size(), cap});
        graph[e].push_back({s, (ll) graph[s].size() - 1, rev_cap});
    }

    bool assign_level(ll src, ll sink) {
        fill(level.begin(), level.end(), -1);
        queue<ll> q;
        level[src] = 0;
        q.emplace(src);
        while (!q.empty()) {
            ll cur = q.front();
            q.pop();
            for (auto &[nxt,rev,res]: graph[cur]) {
                if (level[nxt] == -1 && res > 0) {
                    level[nxt] = level[cur] + 1;
                    q.emplace(nxt);
                }
            }
        }
        return level[sink] != -1;
    }

    ll block_flow(ll cur, ll sink, ll flow) {
        if (cur == sink) return flow;
        for (ll &i = start[cur]; i < graph[cur].size(); i++) {
            auto &[nxt,rev,res] = graph[cur][i];
            if (res > 0 && level[nxt] == level[cur] + 1) {
                ll pushed = block_flow(nxt, sink, min(flow, res));
                if (pushed > 0) {
                    pushed = min(pushed, pathLimit);
                    res -= pushed;
                    graph[nxt][rev].res += pushed;
                    return pushed;
                }
            }
        }
        return 0;
    }

    ll solve(ll src, ll sink) {
        ll total = 0;
        while (assign_level(src, sink)) {
            fill(start.begin(), start.end(), 0);
            while (ll pushed = block_flow(src, sink, LLONG_MAX)) {
                total += pushed;
            }
        }
        return total;
    }
};

void solve(ll testcase) {
    ll i, j, k;
    ll N, M;
    cin >> N >> M;
    vl R(N); for (auto &e: R) cin >> e;
    vl C(M); for (auto &e: C) cin >> e;

    vvl ans(N, vl(M, 0));

    ll src = N+M, sink = src+1;
    function<bool(ll,ll)> canMake = [&](ll r, ll c) {
        DINIC flow(N+M+2);
        ll needL = 0, needR = 0;
        for (ll i=0; i<N; i++) {
            flow.add_edge(src, i, R[i]);
            needL += R[i];
        }
        for (ll i=0; i<M; i++) {
            flow.add_edge(i+N, sink, C[i]);
            needR += C[i];
        }
        if (needL != needR) return false;

        for (ll j=c+1; j<M; j++)
            flow.add_edge(r, j+N, 1);
        for (ll i=r+1; i<N; i++)
            for (ll j=0; j<M; j++)
                flow.add_edge(i, j+N, 1);
        ll maxFlow = flow.solve(src, sink);
        return maxFlow==needL;
    };

    for (i=0; i<N; i++) {
        for (j=0; j<M; j++) {
            if (!R[i] || !C[j]) continue;    // 이미 다 채움
            if (!canMake(i, j)) {           // 무조건 1로 채워야 함
                ans[i][j] = 1;
                R[i]--, C[j]--;
                if (R[i]<0 || C[j]<0) { cout << -1; return; }
            }
        }
        if (R[i]>0) { cout << -1; return; } // 행 다 못채움
    }
    for (i=0; i<M; i++)
        if (C[i]>0) { cout << -1; return; } // 열 다 못채움

    for (auto& e : ans) {
        for (auto& v : e) cout << v;
        cout << "\n";
    }
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll testcase = 1; testcase <= t; testcase++) {
        solve(testcase);
    }
    return 0;
}
