#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

void solve() {
    ll i, j, k;
    ll R, C; cin >> R >> C;
    vector<string> table(R);
    for (auto& e : table) cin >> e;

    vvl rowMax(R, vl(C, 1));
    vvl colMax(R, vl(C, 1));

    ll cnt, l, r;
    // 가로방향 팰린드롬 길이
    for (i=0; i<R; i++) {
        for (j=0; j<C; j++) {
            // 홀수 팰린드롬
            cnt = 1, l = j-1, r = j+1;
            while (l>=0 && r<C && table[i][l]==table[i][r]) {
                l--, r++, cnt+=2;
            }
            l++, r--;
            for (k=l; k<=r; k++) rowMax[i][k] = max(rowMax[i][k], cnt);

            // 짝수 팰린드롬
            cnt = 0, l = j, r = j+1;
            while (l>=0 && r<C && table[i][l]==table[i][r]) {
                l--, r++, cnt+=2;
            }
            l++, r--;
            for (k=l; k<=r; k++) rowMax[i][k] = max(rowMax[i][k], cnt);
        }
    }
    // 세로방향 팰린드롬 길이
    for (i=0; i<R; i++) {
        for (j=0; j<C; j++) {
            // 홀수 팰린드롬
            cnt = 1; l = i-1; r = i+1;
            while (l>=0 && r<R && table[l][j]==table[r][j]) {
                l--, r++, cnt+=2;
            }
            l++, r--;
            for (k=l; k<=r; k++)
                colMax[k][j] = max(colMax[k][j], cnt);

            // 짝수 팰린드롬
            cnt = 0; l = i; r = i+1;
            while (l>=0 && r<R && table[l][j]==table[r][j]) {
                l--, r++, cnt+=2;
            }
            l++, r--;
            for (k=l; k<=r; k++)
                colMax[k][j] = max(colMax[k][j], cnt);
        }
    }

    ll ans = 0;
    for (i=0; i<R; i++) {
        for (j=0; j<C; j++) {
            ans = max(ans, rowMax[i][j]*colMax[i][j]);
        }
    }
    cout << ans;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test=1; test<=t; test++) {
        solve();
    }
    return 0;
}