#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

struct Tri {
    struct Node {
        map<char,ll> nxt;
        bool isEnd = false;
    };
    vector<Node> tree;
    Tri() { tree.emplace_back(); }
    void insert(const string& word) {
        ll cur = 0;
        for (auto& c : word) {
            if (!tree[cur].nxt.contains(c)) {
                tree[cur].nxt[c] = tree.size();
                tree.emplace_back();
            }
            cur = tree[cur].nxt[c];
        }
        tree[cur].isEnd = true;
    }
    ll endsWith(const string& word) {
        ll cur = 0, depth = 0;
        for (ll i=word.size()-1; i>=0; i--) {
            if (!tree[cur].nxt.contains(word[i])) return 0;
            cur = tree[cur].nxt[word[i]];
            depth++;
            if (tree[cur].isEnd) return depth;
        }
        return 0;
    }
};

void solve() {
    ll i, j, k;

    Tri tri;
    vector<string> emoticon = {
        ":)", ":-)", ":-(", ";-)","xD",
        "^_^", "-_-", "^o^", "^^;", "(..)"
    };
    for (auto& e : emoticon) {
        reverse(e.begin(), e.end());
        tri.insert(e);
    }

    vector<char> ch;
    string input; getline(cin, input);
    unordered_set<char> usedCh;
    for (auto& c : input)
        usedCh.insert(c);
    ll minLen = 1e10, maxLen = -1e10;
    string str, st;
    for (auto& c_ori : usedCh) {
        for (char c_new=32; c_new<=126; c_new++) {
            // if (c_ori == c_new) continue;
            str = input;
            for (auto& c : str) if (c==c_ori) c = c_new;
            ll cnt; st = "";
            for (i=0; i<str.size(); i++) {
                st += str[i];
                if ((cnt=tri.endsWith(st)) != 0) {
                    st.erase(st.size()-cnt);
                    st += "*";
                }
            }
            minLen = min(minLen, (ll)st.size());
            maxLen = max(maxLen, (ll)st.size());
        }
    }
    cout << minLen << " " << maxLen;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test=1; test<=t; test++) {
        solve();
    }
    return 0;
}