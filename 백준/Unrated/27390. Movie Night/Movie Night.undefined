#include <bits/stdc++.h>
#pragma warning(disable:4996)
#pragma comment(linker,"/STACK:336777216")
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")
using namespace std;
using ll = long long;
using pll = pair<ll,ll>;
using ld = long double;
using pld = pair<ld,ld>;
using tlll = tuple<ll,ll,ll>;
using vl = vector<ll>;
using vvl = vector<vl>;

#ifdef ONLINE_JUDGE
constexpr bool ndebug = true;
#else
constexpr bool ndebug = false;
#endif

void setup() {
    if (!ndebug) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
    else {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
}

void preprocess() {
    ll i, j, k;
}

struct SCC {
    ll n, vtime, scc_cnt;
    vvl graph;
    vl up, visit, scc_idx, stk;

    SCC(ll n, vvl& graph)
        : n(n), graph(graph), up(n), visit(n, 0), scc_idx(n, 0),
    vtime(0), scc_cnt(0) {
        for (ll i=0; i<n; i++) {
            if (visit[i]==0) dfs(i);
        }
    }

    void dfs(ll node) {
        up[node] = visit[node] = ++vtime;
        stk.emplace_back(node);
        for (auto& next : graph[node]) {
            if (visit[next] == 0) {
                dfs(next);
                up[node] = min(up[node], up[next]);
            }
            else if (scc_idx[next]==0) {
                up[node] = min(up[node], visit[next]);
            }
        }
        if (up[node]==visit[node]) {
            ++scc_cnt;
            ll t;
            do {
                t = stk.back();
                stk.pop_back();
                scc_idx[t] = scc_cnt;
            } while (!stk.empty() && t!=node);
        }
    }
};

void solve() {
    ll i, j, k;
    ll N; cin >> N;
    vvl G(N);
    ll num;
    for (i=0; i<N; i++) {
        cin >> num;
        G[i].emplace_back(num-1);
    }
    SCC scc(N, G);
    ll numGroup = scc.scc_cnt;

    vvl tree(numGroup);
    vl out_degree(numGroup, 0);
    for (i=0; i<N; i++) {
        for (auto& e : G[i]) {
            if (scc.scc_idx[i] != scc.scc_idx[e]) {
                tree[scc.scc_idx[e]-1].emplace_back(scc.scc_idx[i]-1);
                out_degree[scc.scc_idx[i]-1]++;
            }
        }
    }

    ll MOD = 1'000'000'007;

    vl root;
    for (i=0; i<numGroup; i++)
        if (out_degree[i]==0)
            root.emplace_back(i);

    function<ll(ll)> treeDP = [&](ll node) {
        ll ret = 1;
        for (auto& e : tree[node]) {
            ret = ret * treeDP(e) %MOD;
        }
        return ret + 1;
    };

    ll ans = 1;
    for (auto& e : root) {
        ans = ans * treeDP(e) %MOD;
    }
    cout << (ans-1 +MOD) %MOD;
}

int main() {
    setup();
    preprocess();
    ll t = 1;
    // cin >> t;
    for (ll test=t; test<=t; test++) {
        solve();
    }
    return 0;
}
